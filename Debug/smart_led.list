
smart_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006070  08006070  00007070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006268  08006268  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006268  08006268  00007268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006270  08006270  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006270  08006270  00007270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006274  08006274  00007274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006278  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          00000efc  2000000c  2000000c  0000800c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f08  20000f08  0000800c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9dd  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f2d  00000000  00000000  00016a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00018948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b37  00000000  00000000  00019788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002335  00000000  00000000  0001a2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010001  00000000  00000000  0001c5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccc70  00000000  00000000  0002c5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9265  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000409c  00000000  00000000  000f92a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000fd344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006058 	.word	0x08006058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006058 	.word	0x08006058

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];	// for brightness

int datasentflag = 0;  // set once the DMA stopped

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000ea0:	f002 fb3c 	bl	800351c <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;  // the flag ensures that the DMA dont send another data while the first data is still transmitted
 8000ea4:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000080 	.word	0x20000080
 8000eb8:	2000035c 	.word	0x2000035c

08000ebc <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
	LED_data[LEDnum][0] = LEDnum;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	b2d9      	uxtb	r1, r3
 8000ece:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <Set_LED+0x58>)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_data[LEDnum][1] = Green;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	b2d9      	uxtb	r1, r3
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <Set_LED+0x58>)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	460a      	mov	r2, r1
 8000ee4:	705a      	strb	r2, [r3, #1]
	LED_data[LEDnum][2] = Red;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	b2d9      	uxtb	r1, r3
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <Set_LED+0x58>)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	709a      	strb	r2, [r3, #2]
	LED_data[LEDnum][3] = Blue;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2d9      	uxtb	r1, r3
 8000efa:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <Set_LED+0x58>)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	460a      	mov	r2, r1
 8000f04:	70da      	strb	r2, [r3, #3]
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	2000017c 	.word	0x2000017c

08000f18 <Set_Brightness>:

# define PI 3.14159265

void Set_Brightness (int brightness){
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f24:	dd01      	ble.n	8000f2a <Set_Brightness+0x12>
 8000f26:	232d      	movs	r3, #45	@ 0x2d
 8000f28:	607b      	str	r3, [r7, #4]
	for(int i=0; i<MAX_LED; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e060      	b.n	8000ff2 <Set_Brightness+0xda>
		LED_Mod[i][0] = LED_data[i][0];
 8000f30:	4a37      	ldr	r2, [pc, #220]	@ (8001010 <Set_Brightness+0xf8>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f38:	4a36      	ldr	r2, [pc, #216]	@ (8001014 <Set_Brightness+0xfc>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for(int j=1; j<4;j++){
 8000f40:	2301      	movs	r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	e04f      	b.n	8000fe6 <Set_Brightness+0xce>
			float angle = 90 - brightness; // in degrees
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f54:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180; // in rad
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff fa99 	bl	8000490 <__aeabi_f2d>
 8000f5e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001008 <Set_Brightness+0xf0>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff faec 	bl	8000540 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <Set_Brightness+0x100>)
 8000f76:	f7ff fc0d 	bl	8000794 <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fdbf 	bl	8000b04 <__aeabi_d2f>
 8000f86:	4603      	mov	r3, r0
 8000f88:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_data[i][j])/(tan(angle));
 8000f8a:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <Set_Brightness+0xf8>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	441a      	add	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fa67 	bl	800046c <__aeabi_i2d>
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	460d      	mov	r5, r1
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff fa74 	bl	8000490 <__aeabi_f2d>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	ec43 2b10 	vmov	d0, r2, r3
 8000fb0:	f003 ffc2 	bl	8004f38 <tan>
 8000fb4:	ec53 2b10 	vmov	r2, r3, d0
 8000fb8:	4620      	mov	r0, r4
 8000fba:	4629      	mov	r1, r5
 8000fbc:	f7ff fbea 	bl	8000794 <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fd7c 	bl	8000ac4 <__aeabi_d2uiz>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b2d9      	uxtb	r1, r3
 8000fd0:	4a10      	ldr	r2, [pc, #64]	@ (8001014 <Set_Brightness+0xfc>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	441a      	add	r2, r3
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4413      	add	r3, r2
 8000fdc:	460a      	mov	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]
		for(int j=1; j<4;j++){
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	ddac      	ble.n	8000f46 <Set_Brightness+0x2e>
	for(int i=0; i<MAX_LED; i++){
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ff6:	dd9b      	ble.n	8000f30 <Set_Brightness+0x18>
		}
	}

#endif
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bdb0      	pop	{r4, r5, r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	53c8d4f1 	.word	0x53c8d4f1
 800100c:	400921fb 	.word	0x400921fb
 8001010:	2000017c 	.word	0x2000017c
 8001014:	2000026c 	.word	0x2000026c
 8001018:	40668000 	.word	0x40668000

0800101c <WS2812B_Send>:
}


  // the extra 50 is to store the reset code

void WS2812B_Send(void){
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
	uint32_t indx = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for(int i=0; i<MAX_LED; i++){
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	e036      	b.n	800109a <WS2812B_Send+0x7e>
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<< 8) | (LED_Mod[i][3]));
 800102c:	4a2e      	ldr	r2, [pc, #184]	@ (80010e8 <WS2812B_Send+0xcc>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	041a      	lsls	r2, r3, #16
 8001038:	492b      	ldr	r1, [pc, #172]	@ (80010e8 <WS2812B_Send+0xcc>)
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	789b      	ldrb	r3, [r3, #2]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	431a      	orrs	r2, r3
 8001046:	4928      	ldr	r1, [pc, #160]	@ (80010e8 <WS2812B_Send+0xcc>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	78db      	ldrb	r3, [r3, #3]
 8001050:	4313      	orrs	r3, r2
 8001052:	607b      	str	r3, [r7, #4]

		for(int i=23; i>=0; i--){
 8001054:	2317      	movs	r3, #23
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e019      	b.n	800108e <WS2812B_Send+0x72>
			if(color&(1<<i)){
 800105a:	2201      	movs	r2, #1
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	461a      	mov	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4013      	ands	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <WS2812B_Send+0x5c>
				pwmData[indx] = 60;  	//  2/3 of 90  (datasheet timing)
 800106c:	4a1f      	ldr	r2, [pc, #124]	@ (80010ec <WS2812B_Send+0xd0>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	213c      	movs	r1, #60	@ 0x3c
 8001072:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001076:	e004      	b.n	8001082 <WS2812B_Send+0x66>
			}
			else pwmData[indx] = 30;	//  1/3 of 90  (datasheet timing)
 8001078:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <WS2812B_Send+0xd0>)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	211e      	movs	r1, #30
 800107e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
		for(int i=23; i>=0; i--){
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3b01      	subs	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	dae2      	bge.n	800105a <WS2812B_Send+0x3e>
	for(int i=0; i<MAX_LED; i++){
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	2b3b      	cmp	r3, #59	@ 0x3b
 800109e:	ddc5      	ble.n	800102c <WS2812B_Send+0x10>
		}
	}
	for(int i=0; i<50; i++){  // from datasheet info  50 zeros -> reset code   50usec delay in the PWM output
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	e00a      	b.n	80010bc <WS2812B_Send+0xa0>
		pwmData[indx] =0;
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <WS2812B_Send+0xd0>)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2100      	movs	r1, #0
 80010ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
	for(int i=0; i<50; i++){  // from datasheet info  50 zeros -> reset code   50usec delay in the PWM output
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b31      	cmp	r3, #49	@ 0x31
 80010c0:	ddf1      	ble.n	80010a6 <WS2812B_Send+0x8a>
	}
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)pwmData, indx);
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4a09      	ldr	r2, [pc, #36]	@ (80010ec <WS2812B_Send+0xd0>)
 80010c8:	2104      	movs	r1, #4
 80010ca:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <WS2812B_Send+0xd4>)
 80010cc:	f002 f85e 	bl	800318c <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag){};
 80010d0:	bf00      	nop
 80010d2:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <WS2812B_Send+0xd8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0fb      	beq.n	80010d2 <WS2812B_Send+0xb6>
	datasentflag = 0;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <WS2812B_Send+0xd8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000026c 	.word	0x2000026c
 80010ec:	20000360 	.word	0x20000360
 80010f0:	20000080 	.word	0x20000080
 80010f4:	2000035c 	.word	0x2000035c

080010f8 <HAL_UART_TxCpltCallback>:





void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]


}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2){
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <HAL_UART_RxCpltCallback+0x24>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d102      	bne.n	8001124 <HAL_UART_RxCpltCallback+0x18>
		data_received_flag = 1;
 800111e:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <HAL_UART_RxCpltCallback+0x28>)
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]

	// in case we have multiple usarts:
	//if(huart->Instance==USART1){
			// ez akkor kell ha van másik UART ról is megszakítás
	//}
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40004400 	.word	0x40004400
 8001134:	20000170 	.word	0x20000170

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f000 fbd3 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f865 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f000 f9a5 	bl	8001494 <MX_GPIO_Init>
  MX_DMA_Init();
 800114a:	f000 f983 	bl	8001454 <MX_DMA_Init>
  MX_SPI2_Init();
 800114e:	f000 f8c7 	bl	80012e0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001152:	f000 f955 	bl	8001400 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001156:	f000 f8fb 	bl	8001350 <MX_TIM3_Init>

  // i have to start the reception before transmittion ??  dont forget
  //HAL_UART_Receive_IT(&huart2, (uint8_t *)uart_buffer_rx, 10);
  //HAL_UART_Transmit_IT(&huart2, buffer_tx, 10);
  //HAL_UART_Receive_IT(&huart2, buffer_rx, 10);
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart_buffer_rx, 4);
 800115a:	2204      	movs	r2, #4
 800115c:	4926      	ldr	r1, [pc, #152]	@ (80011f8 <main+0xc0>)
 800115e:	4827      	ldr	r0, [pc, #156]	@ (80011fc <main+0xc4>)
 8001160:	f002 ffa4 	bl	80040ac <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(data_received_flag){
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <main+0xc8>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0fa      	beq.n	8001164 <main+0x2c>
		  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart_buffer_rx, 4);
 800116e:	2204      	movs	r2, #4
 8001170:	4921      	ldr	r1, [pc, #132]	@ (80011f8 <main+0xc0>)
 8001172:	4822      	ldr	r0, [pc, #136]	@ (80011fc <main+0xc4>)
 8001174:	f002 ff9a 	bl	80040ac <HAL_UART_Receive_IT>
		  input_red = uart_buffer_rx[0];
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <main+0xc0>)
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <main+0xcc>)
 800117e:	701a      	strb	r2, [r3, #0]
		  input_green = uart_buffer_rx[1];
 8001180:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <main+0xc0>)
 8001182:	785a      	ldrb	r2, [r3, #1]
 8001184:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <main+0xd0>)
 8001186:	701a      	strb	r2, [r3, #0]
		  input_blue = uart_buffer_rx[2];
 8001188:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <main+0xc0>)
 800118a:	789a      	ldrb	r2, [r3, #2]
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <main+0xd4>)
 800118e:	701a      	strb	r2, [r3, #0]


		  //void byteToRGB();
		  for(int i=0; i<30;i++){
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	e00d      	b.n	80011b2 <main+0x7a>
		  	  Set_LED(i,input_red, input_green, input_blue);
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <main+0xcc>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <main+0xd0>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <main+0xd4>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fe88 	bl	8000ebc <Set_LED>
		  for(int i=0; i<30;i++){
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b1d      	cmp	r3, #29
 80011b6:	ddee      	ble.n	8001196 <main+0x5e>
		  }
		  for(int i=30; i<59;i++){
 80011b8:	231e      	movs	r3, #30
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	e00d      	b.n	80011da <main+0xa2>
		    Set_LED(i,input_red, input_green, input_blue);
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <main+0xcc>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <main+0xd0>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <main+0xd4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	6838      	ldr	r0, [r7, #0]
 80011d0:	f7ff fe74 	bl	8000ebc <Set_LED>
		  for(int i=30; i<59;i++){
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80011de:	ddee      	ble.n	80011be <main+0x86>
		  }
		  Set_Brightness(uart_buffer_rx[3]);
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <main+0xc0>)
 80011e2:	78db      	ldrb	r3, [r3, #3]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fe97 	bl	8000f18 <Set_Brightness>
		  WS2812B_Send();
 80011ea:	f7ff ff17 	bl	800101c <WS2812B_Send>



		  //HAL_UART_Transmit_IT(&huart2, uart_buffer_rx, 15);

		  data_received_flag = 0;
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <main+0xc8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
	  if(data_received_flag){
 80011f4:	e7b6      	b.n	8001164 <main+0x2c>
 80011f6:	bf00      	nop
 80011f8:	20000174 	.word	0x20000174
 80011fc:	20000128 	.word	0x20000128
 8001200:	20000170 	.word	0x20000170
 8001204:	20000178 	.word	0x20000178
 8001208:	20000179 	.word	0x20000179
 800120c:	2000017a 	.word	0x2000017a

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	@ 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	@ 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f003 fe5e 	bl	8004ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <SystemClock_Config+0xc8>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	4a26      	ldr	r2, [pc, #152]	@ (80012d8 <SystemClock_Config+0xc8>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	@ 0x40
 8001244:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <SystemClock_Config+0xc8>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <SystemClock_Config+0xcc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a20      	ldr	r2, [pc, #128]	@ (80012dc <SystemClock_Config+0xcc>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <SystemClock_Config+0xcc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800126c:	2302      	movs	r3, #2
 800126e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001270:	2301      	movs	r3, #1
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001274:	2310      	movs	r3, #16
 8001276:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001278:	2302      	movs	r3, #2
 800127a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800127c:	2300      	movs	r3, #0
 800127e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001280:	2308      	movs	r3, #8
 8001282:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001284:	2348      	movs	r3, #72	@ 0x48
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800128c:	2304      	movs	r3, #4
 800128e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fa49 	bl	800272c <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a0:	f000 f92e 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fcab 	bl	8002c1c <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012cc:	f000 f918 	bl	8001500 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3750      	adds	r7, #80	@ 0x50
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_SPI2_Init+0x68>)
 80012e6:	4a19      	ldr	r2, [pc, #100]	@ (800134c <MX_SPI2_Init+0x6c>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <MX_SPI2_Init+0x68>)
 80012ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_SPI2_Init+0x68>)
 80012f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012f8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_SPI2_Init+0x68>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800130c:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_SPI2_Init+0x68>)
 800130e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001312:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001316:	2210      	movs	r2, #16
 8001318:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_SPI2_Init+0x68>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_SPI2_Init+0x68>)
 800132e:	220a      	movs	r2, #10
 8001330:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_SPI2_Init+0x68>)
 8001334:	f001 fe52 	bl	8002fdc <HAL_SPI_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800133e:	f000 f8df 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000028 	.word	0x20000028
 800134c:	40003800 	.word	0x40003800

08001350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]
 8001370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 8001374:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <MX_TIM3_Init+0xac>)
 8001376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 8001386:	2259      	movs	r2, #89	@ 0x59
 8001388:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001396:	4818      	ldr	r0, [pc, #96]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 8001398:	f001 fea9 	bl	80030ee <HAL_TIM_PWM_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80013a2:	f000 f8ad 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	4619      	mov	r1, r3
 80013b4:	4810      	ldr	r0, [pc, #64]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 80013b6:	f002 fdad 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80013c0:	f000 f89e 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c4:	2360      	movs	r3, #96	@ 0x60
 80013c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2204      	movs	r2, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 80013dc:	f002 f970 	bl	80036c0 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013e6:	f000 f88b 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013ea:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <MX_TIM3_Init+0xa8>)
 80013ec:	f000 f972 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	@ 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000080 	.word	0x20000080
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <MX_USART2_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_USART2_UART_Init+0x4c>)
 8001438:	f002 fde8 	bl	800400c <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 f85d 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000128 	.word	0x20000128
 8001450:	40004400 	.word	0x40004400

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_DMA_Init+0x3c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <MX_DMA_Init+0x3c>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_DMA_Init+0x3c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2010      	movs	r0, #16
 800147c:	f000 fb81 	bl	8001b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001480:	2010      	movs	r0, #16
 8001482:	f000 fb9a 	bl	8001bba <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a16      	ldr	r2, [pc, #88]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a0f      	ldr	r2, [pc, #60]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MX_GPIO_Init+0x68>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	4a0f      	ldr	r2, [pc, #60]	@ (8001558 <HAL_MspInit+0x4c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001520:	6453      	str	r3, [r2, #68]	@ 0x44
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_MspInit+0x4c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a28      	ldr	r2, [pc, #160]	@ (800161c <HAL_SPI_MspInit+0xc0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d14a      	bne.n	8001614 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a26      	ldr	r2, [pc, #152]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a18      	ldr	r2, [pc, #96]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <HAL_SPI_MspInit+0xc4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d2:	2308      	movs	r3, #8
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e2:	2305      	movs	r3, #5
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	480d      	ldr	r0, [pc, #52]	@ (8001624 <HAL_SPI_MspInit+0xc8>)
 80015ee:	f000 ff01 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001604:	2305      	movs	r3, #5
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <HAL_SPI_MspInit+0xcc>)
 8001610:	f000 fef0 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	@ 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40003800 	.word	0x40003800
 8001620:	40023800 	.word	0x40023800
 8001624:	40020800 	.word	0x40020800
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a22      	ldr	r2, [pc, #136]	@ (80016c4 <HAL_TIM_PWM_MspInit+0x98>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d13d      	bne.n	80016ba <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <HAL_TIM_PWM_MspInit+0x9c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	4a20      	ldr	r2, [pc, #128]	@ (80016c8 <HAL_TIM_PWM_MspInit+0x9c>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6413      	str	r3, [r2, #64]	@ 0x40
 800164e:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <HAL_TIM_PWM_MspInit+0x9c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 800165c:	4a1c      	ldr	r2, [pc, #112]	@ (80016d0 <HAL_TIM_PWM_MspInit+0xa4>)
 800165e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 8001662:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001666:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800166e:	4b17      	ldr	r3, [pc, #92]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 8001676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800167a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 800167e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001682:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 8001686:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800168a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800168c:	4b0f      	ldr	r3, [pc, #60]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800169e:	480b      	ldr	r0, [pc, #44]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 80016a0:	f000 faa6 	bl	8001bf0 <HAL_DMA_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80016aa:	f7ff ff29 	bl	8001500 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a06      	ldr	r2, [pc, #24]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80016b4:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <HAL_TIM_PWM_MspInit+0xa0>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40000400 	.word	0x40000400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	200000c8 	.word	0x200000c8
 80016d0:	40026088 	.word	0x40026088

080016d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a12      	ldr	r2, [pc, #72]	@ (800173c <HAL_TIM_MspPostInit+0x68>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d11d      	bne.n	8001732 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <HAL_TIM_MspPostInit+0x6c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <HAL_TIM_MspPostInit+0x6c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001722:	2302      	movs	r3, #2
 8001724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	@ (8001744 <HAL_TIM_MspPostInit+0x70>)
 800172e:	f000 fe61 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40000400 	.word	0x40000400
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000

08001748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	@ 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1d      	ldr	r2, [pc, #116]	@ (80017dc <HAL_UART_MspInit+0x94>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d133      	bne.n	80017d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <HAL_UART_MspInit+0x98>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a1b      	ldr	r2, [pc, #108]	@ (80017e0 <HAL_UART_MspInit+0x98>)
 8001774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <HAL_UART_MspInit+0x98>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_UART_MspInit+0x98>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <HAL_UART_MspInit+0x98>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_UART_MspInit+0x98>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017a2:	230c      	movs	r3, #12
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b2:	2307      	movs	r3, #7
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <HAL_UART_MspInit+0x9c>)
 80017be:	f000 fe19 	bl	80023f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	2026      	movs	r0, #38	@ 0x26
 80017c8:	f000 f9db 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017cc:	2026      	movs	r0, #38	@ 0x26
 80017ce:	f000 f9f4 	bl	8001bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	@ 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40004400 	.word	0x40004400
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <NMI_Handler+0x4>

080017f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <MemManage_Handler+0x4>

08001800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <UsageFault_Handler+0x4>

08001810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183e:	f000 f8a5 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <DMA1_Stream5_IRQHandler+0x10>)
 800184e:	f000 fb67 	bl	8001f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200000c8 	.word	0x200000c8

0800185c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <USART2_IRQHandler+0x10>)
 8001862:	f002 fc49 	bl	80040f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000128 	.word	0x20000128

08001870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <SystemInit+0x20>)
 8001876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <SystemInit+0x20>)
 800187c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001898:	f7ff ffea 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189e:	490d      	ldr	r1, [pc, #52]	@ (80018d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a0:	4a0d      	ldr	r2, [pc, #52]	@ (80018d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b4:	4c0a      	ldr	r4, [pc, #40]	@ (80018e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018c2:	f003 fb15 	bl	8004ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7ff fc37 	bl	8001138 <main>
  bx  lr    
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018d8:	08006278 	.word	0x08006278
  ldr r2, =_sbss
 80018dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018e0:	20000f08 	.word	0x20000f08

080018e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_Init+0x40>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <HAL_Init+0x40>)
 80018f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_Init+0x40>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_Init+0x40>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <HAL_Init+0x40>)
 800190a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001910:	2003      	movs	r0, #3
 8001912:	f000 f92b 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001916:	200f      	movs	r0, #15
 8001918:	f000 f808 	bl	800192c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fdf6 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023c00 	.word	0x40023c00

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_InitTick+0x54>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_InitTick+0x58>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f943 	bl	8001bd6 <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f90b 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	@ (8001988 <HAL_InitTick+0x5c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000000 	.word	0x20000000
 8001984:	20000008 	.word	0x20000008
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000f04 	.word	0x20000f04

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000f04 	.word	0x20000f04

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	@ (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff29 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b94:	f7ff ff3e 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff ff8e 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff5d 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff31 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ffa2 	bl	8001b28 <SysTick_Config>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff feda 	bl	80019b4 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e099      	b.n	8001d40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2c:	e00f      	b.n	8001c4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2e:	f7ff fec1 	bl	80019b4 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b05      	cmp	r3, #5
 8001c3a:	d908      	bls.n	8001c4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2203      	movs	r2, #3
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e078      	b.n	8001d40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1e8      	bne.n	8001c2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	4b38      	ldr	r3, [pc, #224]	@ (8001d48 <HAL_DMA_Init+0x158>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d107      	bne.n	8001cb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f023 0307 	bic.w	r3, r3, #7
 8001cce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d117      	bne.n	8001d12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00e      	beq.n	8001d12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fb01 	bl	80022fc <DMA_CheckFifoParam>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2240      	movs	r2, #64	@ 0x40
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e016      	b.n	8001d40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fab8 	bl	8002290 <DMA_CalcBaseAndBitshift>
 8001d20:	4603      	mov	r3, r0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d28:	223f      	movs	r2, #63	@ 0x3f
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	f010803f 	.word	0xf010803f

08001d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_DMA_Start_IT+0x26>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e040      	b.n	8001df4 <HAL_DMA_Start_IT+0xa8>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d12f      	bne.n	8001de6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fa4a 	bl	8002234 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da4:	223f      	movs	r2, #63	@ 0x3f
 8001da6:	409a      	lsls	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0216 	orr.w	r2, r2, #22
 8001dba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0208 	orr.w	r2, r2, #8
 8001dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e005      	b.n	8001df2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
 8001df0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e0a:	f7ff fdd3 	bl	80019b4 <HAL_GetTick>
 8001e0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d008      	beq.n	8001e2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2280      	movs	r2, #128	@ 0x80
 8001e20:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e052      	b.n	8001ed4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0216 	bic.w	r2, r2, #22
 8001e3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d103      	bne.n	8001e5e <HAL_DMA_Abort+0x62>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d007      	beq.n	8001e6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0208 	bic.w	r2, r2, #8
 8001e6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7e:	e013      	b.n	8001ea8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e80:	f7ff fd98 	bl	80019b4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d90c      	bls.n	8001ea8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2203      	movs	r2, #3
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e015      	b.n	8001ed4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1e4      	bne.n	8001e80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eba:	223f      	movs	r2, #63	@ 0x3f
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d004      	beq.n	8001efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2280      	movs	r2, #128	@ 0x80
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00c      	b.n	8001f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2205      	movs	r2, #5
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002168 <HAL_DMA_IRQHandler+0x248>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a8e      	ldr	r2, [pc, #568]	@ (800216c <HAL_DMA_IRQHandler+0x24c>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0a9b      	lsrs	r3, r3, #10
 8001f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d01a      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d013      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0204 	bic.w	r2, r2, #4
 8001f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	2208      	movs	r2, #8
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f90:	2201      	movs	r2, #1
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d012      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00b      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fae:	2201      	movs	r2, #1
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fba:	f043 0202 	orr.w	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d012      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00b      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	f043 0204 	orr.w	r2, r3, #4
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	409a      	lsls	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d043      	beq.n	8002090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d03c      	beq.n	8002090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201a:	2210      	movs	r2, #16
 800201c:	409a      	lsls	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d018      	beq.n	8002062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d108      	bne.n	8002050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d024      	beq.n	8002090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
 800204e:	e01f      	b.n	8002090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e016      	b.n	8002090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0208 	bic.w	r2, r2, #8
 800207e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	2220      	movs	r2, #32
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 808f 	beq.w	80021c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8087 	beq.w	80021c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	2220      	movs	r2, #32
 80020b8:	409a      	lsls	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d136      	bne.n	8002138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0216 	bic.w	r2, r2, #22
 80020d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d103      	bne.n	80020fa <HAL_DMA_IRQHandler+0x1da>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d007      	beq.n	800210a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0208 	bic.w	r2, r2, #8
 8002108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210e:	223f      	movs	r2, #63	@ 0x3f
 8002110:	409a      	lsls	r2, r3
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800212a:	2b00      	cmp	r3, #0
 800212c:	d07e      	beq.n	800222c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
        }
        return;
 8002136:	e079      	b.n	800222c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10d      	bne.n	8002170 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	2b00      	cmp	r3, #0
 800215a:	d031      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
 8002164:	e02c      	b.n	80021c0 <HAL_DMA_IRQHandler+0x2a0>
 8002166:	bf00      	nop
 8002168:	20000000 	.word	0x20000000
 800216c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d023      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
 8002180:	e01e      	b.n	80021c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10f      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0210 	bic.w	r2, r2, #16
 800219e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d032      	beq.n	800222e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d022      	beq.n	800221a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2205      	movs	r2, #5
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0201 	bic.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	3301      	adds	r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d307      	bcc.n	8002208 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f2      	bne.n	80021ec <HAL_DMA_IRQHandler+0x2cc>
 8002206:	e000      	b.n	800220a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002208:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	4798      	blx	r3
 800222a:	e000      	b.n	800222e <HAL_DMA_IRQHandler+0x30e>
        return;
 800222c:	bf00      	nop
    }
  }
}
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002250:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b40      	cmp	r3, #64	@ 0x40
 8002260:	d108      	bne.n	8002274 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002272:	e007      	b.n	8002284 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	60da      	str	r2, [r3, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	3b10      	subs	r3, #16
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <DMA_CalcBaseAndBitshift+0x64>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022aa:	4a13      	ldr	r2, [pc, #76]	@ (80022f8 <DMA_CalcBaseAndBitshift+0x68>)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d909      	bls.n	80022d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	1d1a      	adds	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80022d0:	e007      	b.n	80022e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	aaaaaaab 	.word	0xaaaaaaab
 80022f8:	08006088 	.word	0x08006088

080022fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11f      	bne.n	8002356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d856      	bhi.n	80023ca <DMA_CheckFifoParam+0xce>
 800231c:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <DMA_CheckFifoParam+0x28>)
 800231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002322:	bf00      	nop
 8002324:	08002335 	.word	0x08002335
 8002328:	08002347 	.word	0x08002347
 800232c:	08002335 	.word	0x08002335
 8002330:	080023cb 	.word	0x080023cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002338:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d046      	beq.n	80023ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002344:	e043      	b.n	80023ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800234e:	d140      	bne.n	80023d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002354:	e03d      	b.n	80023d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800235e:	d121      	bne.n	80023a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d837      	bhi.n	80023d6 <DMA_CheckFifoParam+0xda>
 8002366:	a201      	add	r2, pc, #4	@ (adr r2, 800236c <DMA_CheckFifoParam+0x70>)
 8002368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236c:	0800237d 	.word	0x0800237d
 8002370:	08002383 	.word	0x08002383
 8002374:	0800237d 	.word	0x0800237d
 8002378:	08002395 	.word	0x08002395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e030      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002386:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d025      	beq.n	80023da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002392:	e022      	b.n	80023da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002398:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800239c:	d11f      	bne.n	80023de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023a2:	e01c      	b.n	80023de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d903      	bls.n	80023b2 <DMA_CheckFifoParam+0xb6>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d003      	beq.n	80023b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023b0:	e018      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      break;
 80023b6:	e015      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e00b      	b.n	80023e2 <DMA_CheckFifoParam+0xe6>
      break;
 80023ca:	bf00      	nop
 80023cc:	e00a      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e008      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e006      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e004      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
 80023dc:	e002      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80023de:	bf00      	nop
 80023e0:	e000      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
    }
  } 
  
  return status; 
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	@ 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e16b      	b.n	80026e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	f040 815a 	bne.w	80026e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d005      	beq.n	8002446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	2b02      	cmp	r3, #2
 8002444:	d130      	bne.n	80024a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 0201 	and.w	r2, r3, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d017      	beq.n	80024e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d123      	bne.n	8002538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80b4 	beq.w	80026e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b60      	ldr	r3, [pc, #384]	@ (8002700 <HAL_GPIO_Init+0x30c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	4a5f      	ldr	r2, [pc, #380]	@ (8002700 <HAL_GPIO_Init+0x30c>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002588:	6453      	str	r3, [r2, #68]	@ 0x44
 800258a:	4b5d      	ldr	r3, [pc, #372]	@ (8002700 <HAL_GPIO_Init+0x30c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002596:	4a5b      	ldr	r2, [pc, #364]	@ (8002704 <HAL_GPIO_Init+0x310>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	@ (8002708 <HAL_GPIO_Init+0x314>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02b      	beq.n	800261a <HAL_GPIO_Init+0x226>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a51      	ldr	r2, [pc, #324]	@ (800270c <HAL_GPIO_Init+0x318>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d025      	beq.n	8002616 <HAL_GPIO_Init+0x222>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a50      	ldr	r2, [pc, #320]	@ (8002710 <HAL_GPIO_Init+0x31c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01f      	beq.n	8002612 <HAL_GPIO_Init+0x21e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002714 <HAL_GPIO_Init+0x320>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_GPIO_Init+0x21a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002718 <HAL_GPIO_Init+0x324>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x216>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	@ (800271c <HAL_GPIO_Init+0x328>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x212>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002720 <HAL_GPIO_Init+0x32c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002724 <HAL_GPIO_Init+0x330>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x20a>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e00e      	b.n	800261c <HAL_GPIO_Init+0x228>
 80025fe:	2308      	movs	r3, #8
 8002600:	e00c      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002602:	2306      	movs	r3, #6
 8002604:	e00a      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002606:	2305      	movs	r3, #5
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x228>
 800260a:	2304      	movs	r3, #4
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x228>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x228>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262c:	4935      	ldr	r1, [pc, #212]	@ (8002704 <HAL_GPIO_Init+0x310>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b3b      	ldr	r3, [pc, #236]	@ (8002728 <HAL_GPIO_Init+0x334>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265e:	4a32      	ldr	r2, [pc, #200]	@ (8002728 <HAL_GPIO_Init+0x334>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002664:	4b30      	ldr	r3, [pc, #192]	@ (8002728 <HAL_GPIO_Init+0x334>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002688:	4a27      	ldr	r2, [pc, #156]	@ (8002728 <HAL_GPIO_Init+0x334>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268e:	4b26      	ldr	r3, [pc, #152]	@ (8002728 <HAL_GPIO_Init+0x334>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <HAL_GPIO_Init+0x334>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <HAL_GPIO_Init+0x334>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026dc:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <HAL_GPIO_Init+0x334>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f ae90 	bls.w	8002410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3724      	adds	r7, #36	@ 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40021400 	.word	0x40021400
 8002720:	40021800 	.word	0x40021800
 8002724:	40021c00 	.word	0x40021c00
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e267      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d075      	beq.n	8002836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274a:	4b88      	ldr	r3, [pc, #544]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b04      	cmp	r3, #4
 8002754:	d00c      	beq.n	8002770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002756:	4b85      	ldr	r3, [pc, #532]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800275e:	2b08      	cmp	r3, #8
 8002760:	d112      	bne.n	8002788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002762:	4b82      	ldr	r3, [pc, #520]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b7e      	ldr	r3, [pc, #504]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05b      	beq.n	8002834 <HAL_RCC_OscConfig+0x108>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d157      	bne.n	8002834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e242      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x74>
 8002792:	4b76      	ldr	r3, [pc, #472]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a75      	ldr	r2, [pc, #468]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0xb0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x98>
 80027aa:	4b70      	ldr	r3, [pc, #448]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6f      	ldr	r2, [pc, #444]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b6d      	ldr	r3, [pc, #436]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6c      	ldr	r2, [pc, #432]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xb0>
 80027c4:	4b69      	ldr	r3, [pc, #420]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a68      	ldr	r2, [pc, #416]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b66      	ldr	r3, [pc, #408]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a65      	ldr	r2, [pc, #404]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7ff f8e6 	bl	80019b4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7ff f8e2 	bl	80019b4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	@ 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e207      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b5b      	ldr	r3, [pc, #364]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xc0>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7ff f8d2 	bl	80019b4 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002814:	f7ff f8ce 	bl	80019b4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	@ 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1f3      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	4b51      	ldr	r3, [pc, #324]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0xe8>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d063      	beq.n	800290a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002842:	4b4a      	ldr	r3, [pc, #296]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b47      	ldr	r3, [pc, #284]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002856:	2b08      	cmp	r3, #8
 8002858:	d11c      	bne.n	8002894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285a:	4b44      	ldr	r3, [pc, #272]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	4b41      	ldr	r3, [pc, #260]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x152>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1c7      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b3b      	ldr	r3, [pc, #236]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4937      	ldr	r1, [pc, #220]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	e03a      	b.n	800290a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <HAL_RCC_OscConfig+0x244>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7ff f887 	bl	80019b4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028aa:	f7ff f883 	bl	80019b4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1a8      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c8:	4b28      	ldr	r3, [pc, #160]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4925      	ldr	r1, [pc, #148]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e015      	b.n	800290a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028de:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_RCC_OscConfig+0x244>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7ff f866 	bl	80019b4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ec:	f7ff f862 	bl	80019b4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e187      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d036      	beq.n	8002984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_RCC_OscConfig+0x248>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7ff f846 	bl	80019b4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292c:	f7ff f842 	bl	80019b4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e167      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_RCC_OscConfig+0x240>)
 8002940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x200>
 800294a:	e01b      	b.n	8002984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294c:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <HAL_RCC_OscConfig+0x248>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7ff f82f 	bl	80019b4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	e00e      	b.n	8002978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295a:	f7ff f82b 	bl	80019b4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d907      	bls.n	8002978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e150      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
 800296c:	40023800 	.word	0x40023800
 8002970:	42470000 	.word	0x42470000
 8002974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002978:	4b88      	ldr	r3, [pc, #544]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 800297a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ea      	bne.n	800295a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8097 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002996:	4b81      	ldr	r3, [pc, #516]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	4b7d      	ldr	r3, [pc, #500]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	4a7c      	ldr	r2, [pc, #496]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b2:	4b7a      	ldr	r3, [pc, #488]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029be:	2301      	movs	r3, #1
 80029c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b77      	ldr	r3, [pc, #476]	@ (8002ba0 <HAL_RCC_OscConfig+0x474>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d118      	bne.n	8002a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ce:	4b74      	ldr	r3, [pc, #464]	@ (8002ba0 <HAL_RCC_OscConfig+0x474>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a73      	ldr	r2, [pc, #460]	@ (8002ba0 <HAL_RCC_OscConfig+0x474>)
 80029d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029da:	f7fe ffeb 	bl	80019b4 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e2:	f7fe ffe7 	bl	80019b4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e10c      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba0 <HAL_RCC_OscConfig+0x474>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d106      	bne.n	8002a16 <HAL_RCC_OscConfig+0x2ea>
 8002a08:	4b64      	ldr	r3, [pc, #400]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	4a63      	ldr	r2, [pc, #396]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a14:	e01c      	b.n	8002a50 <HAL_RCC_OscConfig+0x324>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b05      	cmp	r3, #5
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x30c>
 8002a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	4a5e      	ldr	r2, [pc, #376]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0x324>
 8002a38:	4b58      	ldr	r3, [pc, #352]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	4a57      	ldr	r2, [pc, #348]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a44:	4b55      	ldr	r3, [pc, #340]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a48:	4a54      	ldr	r2, [pc, #336]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d015      	beq.n	8002a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a58:	f7fe ffac 	bl	80019b4 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a60:	f7fe ffa8 	bl	80019b4 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e0cb      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	4b49      	ldr	r3, [pc, #292]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ee      	beq.n	8002a60 <HAL_RCC_OscConfig+0x334>
 8002a82:	e014      	b.n	8002aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe ff96 	bl	80019b4 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe ff92 	bl	80019b4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e0b5      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ee      	bne.n	8002a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab4:	4b39      	ldr	r3, [pc, #228]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	4a38      	ldr	r2, [pc, #224]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a1 	beq.w	8002c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aca:	4b34      	ldr	r3, [pc, #208]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d05c      	beq.n	8002b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d141      	bne.n	8002b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b31      	ldr	r3, [pc, #196]	@ (8002ba4 <HAL_RCC_OscConfig+0x478>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe ff66 	bl	80019b4 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe ff62 	bl	80019b4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e087      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afe:	4b27      	ldr	r3, [pc, #156]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	019b      	lsls	r3, r3, #6
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	085b      	lsrs	r3, r3, #1
 8002b22:	3b01      	subs	r3, #1
 8002b24:	041b      	lsls	r3, r3, #16
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	491b      	ldr	r1, [pc, #108]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_RCC_OscConfig+0x478>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe ff3b 	bl	80019b4 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fe ff37 	bl	80019b4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e05c      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x416>
 8002b60:	e054      	b.n	8002c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <HAL_RCC_OscConfig+0x478>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe ff24 	bl	80019b4 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe ff20 	bl	80019b4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e045      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_OscConfig+0x470>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x444>
 8002b8e:	e03d      	b.n	8002c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e038      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <HAL_RCC_OscConfig+0x4ec>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d028      	beq.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d121      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d11a      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bd8:	4013      	ands	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d111      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800

08002c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0cc      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b68      	ldr	r3, [pc, #416]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d90c      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b65      	ldr	r3, [pc, #404]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b63      	ldr	r3, [pc, #396]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c70:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a58      	ldr	r2, [pc, #352]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c88:	4b53      	ldr	r3, [pc, #332]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	494d      	ldr	r1, [pc, #308]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d044      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d119      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cda:	4b3f      	ldr	r3, [pc, #252]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e06f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cea:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e067      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfa:	4b37      	ldr	r3, [pc, #220]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 0203 	bic.w	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4934      	ldr	r1, [pc, #208]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d0c:	f7fe fe52 	bl	80019b4 <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d14:	f7fe fe4e 	bl	80019b4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e04f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 020c 	and.w	r2, r3, #12
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d1eb      	bne.n	8002d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d20c      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b22      	ldr	r3, [pc, #136]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e032      	b.n	8002dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4916      	ldr	r1, [pc, #88]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490e      	ldr	r1, [pc, #56]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002da2:	f000 f821 	bl	8002de8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490a      	ldr	r1, [pc, #40]	@ (8002ddc <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a09      	ldr	r2, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe fdb2 	bl	800192c <HAL_InitTick>

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08006070 	.word	0x08006070
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dec:	b090      	sub	sp, #64	@ 0x40
 8002dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002df4:	2300      	movs	r3, #0
 8002df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df8:	2300      	movs	r3, #0
 8002dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d00d      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x40>
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	f200 80a1 	bhi.w	8002f54 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x34>
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d003      	beq.n	8002e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e1a:	e09b      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e1c:	4b53      	ldr	r3, [pc, #332]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002e20:	e09b      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e22:	4b53      	ldr	r3, [pc, #332]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002e26:	e098      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e28:	4b4f      	ldr	r3, [pc, #316]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e32:	4b4d      	ldr	r3, [pc, #308]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d028      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	099b      	lsrs	r3, r3, #6
 8002e44:	2200      	movs	r2, #0
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e50:	2100      	movs	r1, #0
 8002e52:	4b47      	ldr	r3, [pc, #284]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e54:	fb03 f201 	mul.w	r2, r3, r1
 8002e58:	2300      	movs	r3, #0
 8002e5a:	fb00 f303 	mul.w	r3, r0, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	4a43      	ldr	r2, [pc, #268]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e62:	fba0 1202 	umull	r1, r2, r0, r2
 8002e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e68:	460a      	mov	r2, r1
 8002e6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e6e:	4413      	add	r3, r2
 8002e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	2200      	movs	r2, #0
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	61fa      	str	r2, [r7, #28]
 8002e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e82:	f7fd fe8f 	bl	8000ba4 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e8e:	e053      	b.n	8002f38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e90:	4b35      	ldr	r3, [pc, #212]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	099b      	lsrs	r3, r3, #6
 8002e96:	2200      	movs	r2, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	617a      	str	r2, [r7, #20]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ea2:	f04f 0b00 	mov.w	fp, #0
 8002ea6:	4652      	mov	r2, sl
 8002ea8:	465b      	mov	r3, fp
 8002eaa:	f04f 0000 	mov.w	r0, #0
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	0159      	lsls	r1, r3, #5
 8002eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb8:	0150      	lsls	r0, r2, #5
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	ebb2 080a 	subs.w	r8, r2, sl
 8002ec2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ed2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ed6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002eda:	ebb2 0408 	subs.w	r4, r2, r8
 8002ede:	eb63 0509 	sbc.w	r5, r3, r9
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	00eb      	lsls	r3, r5, #3
 8002eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef0:	00e2      	lsls	r2, r4, #3
 8002ef2:	4614      	mov	r4, r2
 8002ef4:	461d      	mov	r5, r3
 8002ef6:	eb14 030a 	adds.w	r3, r4, sl
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	eb45 030b 	adc.w	r3, r5, fp
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f0e:	4629      	mov	r1, r5
 8002f10:	028b      	lsls	r3, r1, #10
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f18:	4621      	mov	r1, r4
 8002f1a:	028a      	lsls	r2, r1, #10
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f22:	2200      	movs	r2, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	60fa      	str	r2, [r7, #12]
 8002f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2c:	f7fd fe3a 	bl	8000ba4 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	3301      	adds	r3, #1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3740      	adds	r7, #64	@ 0x40
 8002f60:	46bd      	mov	sp, r7
 8002f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f66:	bf00      	nop
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	017d7840 	.word	0x017d7840

08002f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f78:	4b03      	ldr	r3, [pc, #12]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000000 	.word	0x20000000

08002f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f90:	f7ff fff0 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0a9b      	lsrs	r3, r3, #10
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	08006080 	.word	0x08006080

08002fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fb8:	f7ff ffdc 	bl	8002f74 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0b5b      	lsrs	r3, r3, #13
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	@ (8002fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	08006080 	.word	0x08006080

08002fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07b      	b.n	80030e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ffe:	d009      	beq.n	8003014 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	61da      	str	r2, [r3, #28]
 8003006:	e005      	b.n	8003014 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe fa94 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800304a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003098:	ea42 0103 	orr.w	r1, r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	f003 0104 	and.w	r1, r3, #4
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	f003 0210 	and.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e041      	b.n	8003184 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7fe fa89 	bl	800162c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2202      	movs	r2, #2
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	4619      	mov	r1, r3
 800312c:	4610      	mov	r0, r2
 800312e:	f000 fc6f 	bl	8003a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e022      	b.n	80031fe <HAL_TIM_PWM_Start_DMA+0x72>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d109      	bne.n	80031d2 <HAL_TIM_PWM_Start_DMA+0x46>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	bf0c      	ite	eq
 80031ca:	2301      	moveq	r3, #1
 80031cc:	2300      	movne	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e015      	b.n	80031fe <HAL_TIM_PWM_Start_DMA+0x72>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d109      	bne.n	80031ec <HAL_TIM_PWM_Start_DMA+0x60>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e008      	b.n	80031fe <HAL_TIM_PWM_Start_DMA+0x72>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	e171      	b.n	80034ea <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <HAL_TIM_PWM_Start_DMA+0x94>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e022      	b.n	8003266 <HAL_TIM_PWM_Start_DMA+0xda>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b04      	cmp	r3, #4
 8003224:	d109      	bne.n	800323a <HAL_TIM_PWM_Start_DMA+0xae>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	bf0c      	ite	eq
 8003232:	2301      	moveq	r3, #1
 8003234:	2300      	movne	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	e015      	b.n	8003266 <HAL_TIM_PWM_Start_DMA+0xda>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <HAL_TIM_PWM_Start_DMA+0xda>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d024      	beq.n	80032b4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_TIM_PWM_Start_DMA+0xea>
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e137      	b.n	80034ea <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <HAL_TIM_PWM_Start_DMA+0xfe>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003288:	e016      	b.n	80032b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d104      	bne.n	800329a <HAL_TIM_PWM_Start_DMA+0x10e>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003298:	e00e      	b.n	80032b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d104      	bne.n	80032aa <HAL_TIM_PWM_Start_DMA+0x11e>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a8:	e006      	b.n	80032b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032b2:	e001      	b.n	80032b8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e118      	b.n	80034ea <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	f200 80ae 	bhi.w	800341c <HAL_TIM_PWM_Start_DMA+0x290>
 80032c0:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	0800341d 	.word	0x0800341d
 80032d0:	0800341d 	.word	0x0800341d
 80032d4:	0800341d 	.word	0x0800341d
 80032d8:	08003345 	.word	0x08003345
 80032dc:	0800341d 	.word	0x0800341d
 80032e0:	0800341d 	.word	0x0800341d
 80032e4:	0800341d 	.word	0x0800341d
 80032e8:	0800338d 	.word	0x0800338d
 80032ec:	0800341d 	.word	0x0800341d
 80032f0:	0800341d 	.word	0x0800341d
 80032f4:	0800341d 	.word	0x0800341d
 80032f8:	080033d5 	.word	0x080033d5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	4a7c      	ldr	r2, [pc, #496]	@ (80034f4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003302:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	4a7b      	ldr	r2, [pc, #492]	@ (80034f8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	4a7a      	ldr	r2, [pc, #488]	@ (80034fc <HAL_TIM_PWM_Start_DMA+0x370>)
 8003312:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	3334      	adds	r3, #52	@ 0x34
 8003320:	461a      	mov	r2, r3
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	f7fe fd12 	bl	8001d4c <HAL_DMA_Start_IT>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0db      	b.n	80034ea <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003340:	60da      	str	r2, [r3, #12]
      break;
 8003342:	e06e      	b.n	8003422 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	4a6a      	ldr	r2, [pc, #424]	@ (80034f4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800334a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	4a69      	ldr	r2, [pc, #420]	@ (80034f8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	4a68      	ldr	r2, [pc, #416]	@ (80034fc <HAL_TIM_PWM_Start_DMA+0x370>)
 800335a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3338      	adds	r3, #56	@ 0x38
 8003368:	461a      	mov	r2, r3
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	f7fe fcee 	bl	8001d4c <HAL_DMA_Start_IT>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0b7      	b.n	80034ea <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003388:	60da      	str	r2, [r3, #12]
      break;
 800338a:	e04a      	b.n	8003422 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	4a58      	ldr	r2, [pc, #352]	@ (80034f4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003392:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	4a57      	ldr	r2, [pc, #348]	@ (80034f8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800339a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a0:	4a56      	ldr	r2, [pc, #344]	@ (80034fc <HAL_TIM_PWM_Start_DMA+0x370>)
 80033a2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	333c      	adds	r3, #60	@ 0x3c
 80033b0:	461a      	mov	r2, r3
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	f7fe fcca 	bl	8001d4c <HAL_DMA_Start_IT>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e093      	b.n	80034ea <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033d0:	60da      	str	r2, [r3, #12]
      break;
 80033d2:	e026      	b.n	8003422 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d8:	4a46      	ldr	r2, [pc, #280]	@ (80034f4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80033da:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e0:	4a45      	ldr	r2, [pc, #276]	@ (80034f8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	4a44      	ldr	r2, [pc, #272]	@ (80034fc <HAL_TIM_PWM_Start_DMA+0x370>)
 80033ea:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3340      	adds	r3, #64	@ 0x40
 80033f8:	461a      	mov	r2, r3
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	f7fe fca6 	bl	8001d4c <HAL_DMA_Start_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06f      	b.n	80034ea <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003418:	60da      	str	r2, [r3, #12]
      break;
 800341a:	e002      	b.n	8003422 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
      break;
 8003420:	bf00      	nop
  }

  if (status == HAL_OK)
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d15f      	bne.n	80034e8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2201      	movs	r2, #1
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fd49 	bl	8003ec8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a31      	ldr	r2, [pc, #196]	@ (8003500 <HAL_TIM_PWM_Start_DMA+0x374>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_TIM_PWM_Start_DMA+0x2be>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2f      	ldr	r2, [pc, #188]	@ (8003504 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d101      	bne.n	800344e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800344e:	2300      	movs	r3, #0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003462:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a25      	ldr	r2, [pc, #148]	@ (8003500 <HAL_TIM_PWM_Start_DMA+0x374>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d022      	beq.n	80034b4 <HAL_TIM_PWM_Start_DMA+0x328>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003476:	d01d      	beq.n	80034b4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	@ (8003508 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d018      	beq.n	80034b4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a21      	ldr	r2, [pc, #132]	@ (800350c <HAL_TIM_PWM_Start_DMA+0x380>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d013      	beq.n	80034b4 <HAL_TIM_PWM_Start_DMA+0x328>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1f      	ldr	r2, [pc, #124]	@ (8003510 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00e      	beq.n	80034b4 <HAL_TIM_PWM_Start_DMA+0x328>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1a      	ldr	r2, [pc, #104]	@ (8003504 <HAL_TIM_PWM_Start_DMA+0x378>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d009      	beq.n	80034b4 <HAL_TIM_PWM_Start_DMA+0x328>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003514 <HAL_TIM_PWM_Start_DMA+0x388>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_TIM_PWM_Start_DMA+0x328>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003518 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d111      	bne.n	80034d8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d010      	beq.n	80034e8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d6:	e007      	b.n	80034e8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	080038ff 	.word	0x080038ff
 80034f8:	080039a7 	.word	0x080039a7
 80034fc:	0800386d 	.word	0x0800386d
 8003500:	40010000 	.word	0x40010000
 8003504:	40010400 	.word	0x40010400
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40000c00 	.word	0x40000c00
 8003514:	40014000 	.word	0x40014000
 8003518:	40001800 	.word	0x40001800

0800351c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d855      	bhi.n	80035dc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003530:	a201      	add	r2, pc, #4	@ (adr r2, 8003538 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800356d 	.word	0x0800356d
 800353c:	080035dd 	.word	0x080035dd
 8003540:	080035dd 	.word	0x080035dd
 8003544:	080035dd 	.word	0x080035dd
 8003548:	08003589 	.word	0x08003589
 800354c:	080035dd 	.word	0x080035dd
 8003550:	080035dd 	.word	0x080035dd
 8003554:	080035dd 	.word	0x080035dd
 8003558:	080035a5 	.word	0x080035a5
 800355c:	080035dd 	.word	0x080035dd
 8003560:	080035dd 	.word	0x080035dd
 8003564:	080035dd 	.word	0x080035dd
 8003568:	080035c1 	.word	0x080035c1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800357a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe fcab 	bl	8001edc <HAL_DMA_Abort_IT>
      break;
 8003586:	e02c      	b.n	80035e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003596:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fc9d 	bl	8001edc <HAL_DMA_Abort_IT>
      break;
 80035a2:	e01e      	b.n	80035e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe fc8f 	bl	8001edc <HAL_DMA_Abort_IT>
      break;
 80035be:	e010      	b.n	80035e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fe fc81 	bl	8001edc <HAL_DMA_Abort_IT>
      break;
 80035da:	e002      	b.n	80035e2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	bf00      	nop
  }

  if (status == HAL_OK)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d161      	bne.n	80036ac <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	6839      	ldr	r1, [r7, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fc69 	bl	8003ec8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a2f      	ldr	r2, [pc, #188]	@ (80036b8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIM_PWM_Stop_DMA+0xee>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2d      	ldr	r2, [pc, #180]	@ (80036bc <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_TIM_PWM_Stop_DMA+0xf2>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800360e:	2300      	movs	r3, #0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d017      	beq.n	8003644 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6a1a      	ldr	r2, [r3, #32]
 800361a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10f      	bne.n	8003644 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	f240 4344 	movw	r3, #1092	@ 0x444
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d107      	bne.n	8003644 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a1a      	ldr	r2, [r3, #32]
 800364a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10f      	bne.n	8003674 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a1a      	ldr	r2, [r3, #32]
 800365a:	f240 4344 	movw	r3, #1092	@ 0x444
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <HAL_TIM_PWM_Stop_DMA+0x168>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003682:	e013      	b.n	80036ac <HAL_TIM_PWM_Stop_DMA+0x190>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d104      	bne.n	8003694 <HAL_TIM_PWM_Stop_DMA+0x178>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003692:	e00b      	b.n	80036ac <HAL_TIM_PWM_Stop_DMA+0x190>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b08      	cmp	r3, #8
 8003698:	d104      	bne.n	80036a4 <HAL_TIM_PWM_Stop_DMA+0x188>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a2:	e003      	b.n	80036ac <HAL_TIM_PWM_Stop_DMA+0x190>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40010400 	.word	0x40010400

080036c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0ae      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	f200 809f 	bhi.w	800382c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036ee:	a201      	add	r2, pc, #4	@ (adr r2, 80036f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003729 	.word	0x08003729
 80036f8:	0800382d 	.word	0x0800382d
 80036fc:	0800382d 	.word	0x0800382d
 8003700:	0800382d 	.word	0x0800382d
 8003704:	08003769 	.word	0x08003769
 8003708:	0800382d 	.word	0x0800382d
 800370c:	0800382d 	.word	0x0800382d
 8003710:	0800382d 	.word	0x0800382d
 8003714:	080037ab 	.word	0x080037ab
 8003718:	0800382d 	.word	0x0800382d
 800371c:	0800382d 	.word	0x0800382d
 8003720:	0800382d 	.word	0x0800382d
 8003724:	080037eb 	.word	0x080037eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa1a 	bl	8003b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0208 	orr.w	r2, r2, #8
 8003742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0204 	bic.w	r2, r2, #4
 8003752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	619a      	str	r2, [r3, #24]
      break;
 8003766:	e064      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fa6a 	bl	8003c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6999      	ldr	r1, [r3, #24]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	021a      	lsls	r2, r3, #8
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	619a      	str	r2, [r3, #24]
      break;
 80037a8:	e043      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fabf 	bl	8003d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0208 	orr.w	r2, r2, #8
 80037c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0204 	bic.w	r2, r2, #4
 80037d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69d9      	ldr	r1, [r3, #28]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	61da      	str	r2, [r3, #28]
      break;
 80037e8:	e023      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fb13 	bl	8003e1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69d9      	ldr	r1, [r3, #28]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	021a      	lsls	r2, r3, #8
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	61da      	str	r2, [r3, #28]
      break;
 800382a:	e002      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	75fb      	strb	r3, [r7, #23]
      break;
 8003830:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800383a:	7dfb      	ldrb	r3, [r7, #23]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	429a      	cmp	r2, r3
 8003882:	d107      	bne.n	8003894 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003892:	e02a      	b.n	80038ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	429a      	cmp	r2, r3
 800389c:	d107      	bne.n	80038ae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2202      	movs	r2, #2
 80038a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ac:	e01d      	b.n	80038ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d107      	bne.n	80038c8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2204      	movs	r2, #4
 80038bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c6:	e010      	b.n	80038ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d107      	bne.n	80038e2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2208      	movs	r2, #8
 80038d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038e0:	e003      	b.n	80038ea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff ffb4 	bl	8003858 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	771a      	strb	r2, [r3, #28]
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d10b      	bne.n	800392e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d136      	bne.n	8003992 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800392c:	e031      	b.n	8003992 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	d10b      	bne.n	8003950 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2202      	movs	r2, #2
 800393c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d125      	bne.n	8003992 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800394e:	e020      	b.n	8003992 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10b      	bne.n	8003972 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2204      	movs	r2, #4
 800395e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d114      	bne.n	8003992 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003970:	e00f      	b.n	8003992 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d10a      	bne.n	8003992 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2208      	movs	r2, #8
 8003980:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7fd fa7e 	bl	8000e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	771a      	strb	r2, [r3, #28]
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d103      	bne.n	80039c6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	771a      	strb	r2, [r3, #28]
 80039c4:	e019      	b.n	80039fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d103      	bne.n	80039d8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2202      	movs	r2, #2
 80039d4:	771a      	strb	r2, [r3, #28]
 80039d6:	e010      	b.n	80039fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d103      	bne.n	80039ea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2204      	movs	r2, #4
 80039e6:	771a      	strb	r2, [r3, #28]
 80039e8:	e007      	b.n	80039fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d102      	bne.n	80039fa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2208      	movs	r2, #8
 80039f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff ff22 	bl	8003844 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	771a      	strb	r2, [r3, #28]
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a46      	ldr	r2, [pc, #280]	@ (8003b3c <TIM_Base_SetConfig+0x12c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d013      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2e:	d00f      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a43      	ldr	r2, [pc, #268]	@ (8003b40 <TIM_Base_SetConfig+0x130>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a42      	ldr	r2, [pc, #264]	@ (8003b44 <TIM_Base_SetConfig+0x134>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a41      	ldr	r2, [pc, #260]	@ (8003b48 <TIM_Base_SetConfig+0x138>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0x40>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	@ (8003b4c <TIM_Base_SetConfig+0x13c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a35      	ldr	r2, [pc, #212]	@ (8003b3c <TIM_Base_SetConfig+0x12c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a70:	d027      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a32      	ldr	r2, [pc, #200]	@ (8003b40 <TIM_Base_SetConfig+0x130>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d023      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a31      	ldr	r2, [pc, #196]	@ (8003b44 <TIM_Base_SetConfig+0x134>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a30      	ldr	r2, [pc, #192]	@ (8003b48 <TIM_Base_SetConfig+0x138>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003b4c <TIM_Base_SetConfig+0x13c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d017      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a2e      	ldr	r2, [pc, #184]	@ (8003b50 <TIM_Base_SetConfig+0x140>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b54 <TIM_Base_SetConfig+0x144>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b58 <TIM_Base_SetConfig+0x148>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2b      	ldr	r2, [pc, #172]	@ (8003b5c <TIM_Base_SetConfig+0x14c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b60 <TIM_Base_SetConfig+0x150>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a29      	ldr	r2, [pc, #164]	@ (8003b64 <TIM_Base_SetConfig+0x154>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d108      	bne.n	8003ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a10      	ldr	r2, [pc, #64]	@ (8003b3c <TIM_Base_SetConfig+0x12c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_Base_SetConfig+0xf8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <TIM_Base_SetConfig+0x13c>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d103      	bne.n	8003b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	691a      	ldr	r2, [r3, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f023 0201 	bic.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40010400 	.word	0x40010400
 8003b50:	40014000 	.word	0x40014000
 8003b54:	40014400 	.word	0x40014400
 8003b58:	40014800 	.word	0x40014800
 8003b5c:	40001800 	.word	0x40001800
 8003b60:	40001c00 	.word	0x40001c00
 8003b64:	40002000 	.word	0x40002000

08003b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 0201 	bic.w	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 0302 	bic.w	r3, r3, #2
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a20      	ldr	r2, [pc, #128]	@ (8003c40 <TIM_OC1_SetConfig+0xd8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC1_SetConfig+0x64>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c44 <TIM_OC1_SetConfig+0xdc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d10c      	bne.n	8003be6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0308 	bic.w	r3, r3, #8
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 0304 	bic.w	r3, r3, #4
 8003be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <TIM_OC1_SetConfig+0xd8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC1_SetConfig+0x8e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a14      	ldr	r2, [pc, #80]	@ (8003c44 <TIM_OC1_SetConfig+0xdc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d111      	bne.n	8003c1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	621a      	str	r2, [r3, #32]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40010000 	.word	0x40010000
 8003c44:	40010400 	.word	0x40010400

08003c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f023 0210 	bic.w	r2, r3, #16
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0320 	bic.w	r3, r3, #32
 8003c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a22      	ldr	r2, [pc, #136]	@ (8003d2c <TIM_OC2_SetConfig+0xe4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_OC2_SetConfig+0x68>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <TIM_OC2_SetConfig+0xe8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d10d      	bne.n	8003ccc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a17      	ldr	r2, [pc, #92]	@ (8003d2c <TIM_OC2_SetConfig+0xe4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d003      	beq.n	8003cdc <TIM_OC2_SetConfig+0x94>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a16      	ldr	r2, [pc, #88]	@ (8003d30 <TIM_OC2_SetConfig+0xe8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d113      	bne.n	8003d04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010400 	.word	0x40010400

08003d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a21      	ldr	r2, [pc, #132]	@ (8003e14 <TIM_OC3_SetConfig+0xe0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_OC3_SetConfig+0x66>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a20      	ldr	r2, [pc, #128]	@ (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d10d      	bne.n	8003db6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003da0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a16      	ldr	r2, [pc, #88]	@ (8003e14 <TIM_OC3_SetConfig+0xe0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_OC3_SetConfig+0x92>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	@ (8003e18 <TIM_OC3_SetConfig+0xe4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d113      	bne.n	8003dee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	621a      	str	r2, [r3, #32]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40010000 	.word	0x40010000
 8003e18:	40010400 	.word	0x40010400

08003e1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a12      	ldr	r2, [pc, #72]	@ (8003ec0 <TIM_OC4_SetConfig+0xa4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_OC4_SetConfig+0x68>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a11      	ldr	r2, [pc, #68]	@ (8003ec4 <TIM_OC4_SetConfig+0xa8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d109      	bne.n	8003e98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	2201      	movs	r2, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	401a      	ands	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1a      	ldr	r2, [r3, #32]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f003 031f 	and.w	r3, r3, #31
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	431a      	orrs	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e05a      	b.n	8003fe2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a21      	ldr	r2, [pc, #132]	@ (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f78:	d01d      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1a      	ldr	r2, [pc, #104]	@ (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a18      	ldr	r2, [pc, #96]	@ (8004000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a15      	ldr	r2, [pc, #84]	@ (8004008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40001800 	.word	0x40001800

0800400c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e042      	b.n	80040a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fd fb88 	bl	8001748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	@ 0x24
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800404e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fcd1 	bl	80049f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	d112      	bne.n	80040ec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_UART_Receive_IT+0x26>
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e00b      	b.n	80040ee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040dc:	88fb      	ldrh	r3, [r7, #6]
 80040de:	461a      	mov	r2, r3
 80040e0:	68b9      	ldr	r1, [r7, #8]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fab0 	bl	8004648 <UART_Start_Receive_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	e000      	b.n	80040ee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040ec:	2302      	movs	r3, #2
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b0ba      	sub	sp, #232	@ 0xe8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10f      	bne.n	800415e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800413e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_UART_IRQHandler+0x66>
 800414a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414e:	f003 0320 	and.w	r3, r3, #32
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fb8f 	bl	800487a <UART_Receive_IT>
      return;
 800415c:	e25b      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800415e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80de 	beq.w	8004324 <HAL_UART_IRQHandler+0x22c>
 8004168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004178:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80d1 	beq.w	8004324 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00b      	beq.n	80041a6 <HAL_UART_IRQHandler+0xae>
 800418e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00b      	beq.n	80041ca <HAL_UART_IRQHandler+0xd2>
 80041b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f043 0202 	orr.w	r2, r3, #2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_UART_IRQHandler+0xf6>
 80041d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	f043 0204 	orr.w	r2, r3, #4
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d011      	beq.n	800421e <HAL_UART_IRQHandler+0x126>
 80041fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f043 0208 	orr.w	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 81f2 	beq.w	800460c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_UART_IRQHandler+0x14e>
 8004234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fb1a 	bl	800487a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004250:	2b40      	cmp	r3, #64	@ 0x40
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d103      	bne.n	8004272 <HAL_UART_IRQHandler+0x17a>
 800426a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d04f      	beq.n	8004312 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fa22 	bl	80046bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004282:	2b40      	cmp	r3, #64	@ 0x40
 8004284:	d141      	bne.n	800430a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3314      	adds	r3, #20
 800428c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800429c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3314      	adds	r3, #20
 80042ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1d9      	bne.n	8004286 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d013      	beq.n	8004302 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	4a7e      	ldr	r2, [pc, #504]	@ (80044d8 <HAL_UART_IRQHandler+0x3e0>)
 80042e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fd fdf8 	bl	8001edc <HAL_DMA_Abort_IT>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d016      	beq.n	8004320 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042fc:	4610      	mov	r0, r2
 80042fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	e00e      	b.n	8004320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f98a 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	e00a      	b.n	8004320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f986 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	e006      	b.n	8004320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f982 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800431e:	e175      	b.n	800460c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004320:	bf00      	nop
    return;
 8004322:	e173      	b.n	800460c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004328:	2b01      	cmp	r3, #1
 800432a:	f040 814f 	bne.w	80045cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8148 	beq.w	80045cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 8141 	beq.w	80045cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800434a:	2300      	movs	r3, #0
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436a:	2b40      	cmp	r3, #64	@ 0x40
 800436c:	f040 80b6 	bne.w	80044dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800437c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8145 	beq.w	8004610 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800438a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800438e:	429a      	cmp	r2, r3
 8004390:	f080 813e 	bcs.w	8004610 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800439a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a6:	f000 8088 	beq.w	80044ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1d9      	bne.n	80043aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800441a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800441e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004422:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800442c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e1      	bne.n	80043f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004456:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004458:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800445c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e3      	bne.n	8004432 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004482:	e853 3f00 	ldrex	r3, [r3]
 8004486:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800448a:	f023 0310 	bic.w	r3, r3, #16
 800448e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800449c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800449e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e3      	bne.n	8004478 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd fca1 	bl	8001dfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8ad 	bl	8004630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044d6:	e09b      	b.n	8004610 <HAL_UART_IRQHandler+0x518>
 80044d8:	08004783 	.word	0x08004783
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 808e 	beq.w	8004614 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8089 	beq.w	8004614 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004526:	647a      	str	r2, [r7, #68]	@ 0x44
 8004528:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800452c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e3      	bne.n	8004502 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	623b      	str	r3, [r7, #32]
   return(result);
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800455e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e3      	bne.n	800453a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80045a4:	61fa      	str	r2, [r7, #28]
 80045a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	617b      	str	r3, [r7, #20]
   return(result);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e3      	bne.n	8004580 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045c2:	4619      	mov	r1, r3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f833 	bl	8004630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045ca:	e023      	b.n	8004614 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d009      	beq.n	80045ec <HAL_UART_IRQHandler+0x4f4>
 80045d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f8e0 	bl	80047aa <UART_Transmit_IT>
    return;
 80045ea:	e014      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <HAL_UART_IRQHandler+0x51e>
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f920 	bl	800484a <UART_EndTransmit_IT>
    return;
 800460a:	e004      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
    return;
 800460c:	bf00      	nop
 800460e:	e002      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
      return;
 8004610:	bf00      	nop
 8004612:	e000      	b.n	8004616 <HAL_UART_IRQHandler+0x51e>
      return;
 8004614:	bf00      	nop
  }
}
 8004616:	37e8      	adds	r7, #232	@ 0xe8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	4613      	mov	r3, r2
 8004654:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2222      	movs	r2, #34	@ 0x22
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800468c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695a      	ldr	r2, [r3, #20]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0220 	orr.w	r2, r2, #32
 80046ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b095      	sub	sp, #84	@ 0x54
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80046e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e5      	bne.n	80046c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3314      	adds	r3, #20
 80046fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	61fb      	str	r3, [r7, #28]
   return(result);
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3314      	adds	r3, #20
 8004716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004718:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800471a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800471e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	2b01      	cmp	r3, #1
 8004732:	d119      	bne.n	8004768 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	330c      	adds	r3, #12
 800473a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	60bb      	str	r3, [r7, #8]
   return(result);
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f023 0310 	bic.w	r3, r3, #16
 800474a:	647b      	str	r3, [r7, #68]	@ 0x44
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004754:	61ba      	str	r2, [r7, #24]
 8004756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6979      	ldr	r1, [r7, #20]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	613b      	str	r3, [r7, #16]
   return(result);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e5      	bne.n	8004734 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004776:	bf00      	nop
 8004778:	3754      	adds	r7, #84	@ 0x54
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f7ff ff3d 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b21      	cmp	r3, #33	@ 0x21
 80047bc:	d13e      	bne.n	800483c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c6:	d114      	bne.n	80047f2 <UART_Transmit_IT+0x48>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d110      	bne.n	80047f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	1c9a      	adds	r2, r3, #2
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	621a      	str	r2, [r3, #32]
 80047f0:	e008      	b.n	8004804 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6211      	str	r1, [r2, #32]
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29b      	uxth	r3, r3
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	4619      	mov	r1, r3
 8004812:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10f      	bne.n	8004838 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004826:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004836:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004860:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fc fc44 	bl	80010f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b08c      	sub	sp, #48	@ 0x30
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b22      	cmp	r3, #34	@ 0x22
 800488c:	f040 80ae 	bne.w	80049ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004898:	d117      	bne.n	80048ca <UART_Receive_IT+0x50>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d113      	bne.n	80048ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c2:	1c9a      	adds	r2, r3, #2
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80048c8:	e026      	b.n	8004918 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048dc:	d007      	beq.n	80048ee <UART_Receive_IT+0x74>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <UART_Receive_IT+0x82>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e008      	b.n	800490e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004908:	b2da      	uxtb	r2, r3
 800490a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29b      	uxth	r3, r3
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4619      	mov	r1, r3
 8004926:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004928:	2b00      	cmp	r3, #0
 800492a:	d15d      	bne.n	80049e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 0220 	bic.w	r2, r2, #32
 800493a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800494a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	2b01      	cmp	r3, #1
 8004970:	d135      	bne.n	80049de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	330c      	adds	r3, #12
 800497e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	613b      	str	r3, [r7, #16]
   return(result);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f023 0310 	bic.w	r3, r3, #16
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004998:	623a      	str	r2, [r7, #32]
 800499a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	69f9      	ldr	r1, [r7, #28]
 800499e:	6a3a      	ldr	r2, [r7, #32]
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e5      	bne.n	8004978 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d10a      	bne.n	80049d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff fe2a 	bl	8004630 <HAL_UARTEx_RxEventCallback>
 80049dc:	e002      	b.n	80049e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7fc fb94 	bl	800110c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e002      	b.n	80049ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e000      	b.n	80049ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3730      	adds	r7, #48	@ 0x30
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049fc:	b0c0      	sub	sp, #256	@ 0x100
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	ea40 0301 	orr.w	r3, r0, r1
 8004a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a50:	f021 010c 	bic.w	r1, r1, #12
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a72:	6999      	ldr	r1, [r3, #24]
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	ea40 0301 	orr.w	r3, r0, r1
 8004a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b8f      	ldr	r3, [pc, #572]	@ (8004cc4 <UART_SetConfig+0x2cc>)
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d005      	beq.n	8004a98 <UART_SetConfig+0xa0>
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b8d      	ldr	r3, [pc, #564]	@ (8004cc8 <UART_SetConfig+0x2d0>)
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d104      	bne.n	8004aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe fa8c 	bl	8002fb4 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004aa0:	e003      	b.n	8004aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fe fa73 	bl	8002f8c <HAL_RCC_GetPCLK1Freq>
 8004aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab4:	f040 810c 	bne.w	8004cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	1891      	adds	r1, r2, r2
 8004ad0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ada:	4621      	mov	r1, r4
 8004adc:	eb12 0801 	adds.w	r8, r2, r1
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	eb43 0901 	adc.w	r9, r3, r1
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afa:	4690      	mov	r8, r2
 8004afc:	4699      	mov	r9, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	eb18 0303 	adds.w	r3, r8, r3
 8004b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b08:	462b      	mov	r3, r5
 8004b0a:	eb49 0303 	adc.w	r3, r9, r3
 8004b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b26:	460b      	mov	r3, r1
 8004b28:	18db      	adds	r3, r3, r3
 8004b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	eb42 0303 	adc.w	r3, r2, r3
 8004b32:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b3c:	f7fc f832 	bl	8000ba4 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4b61      	ldr	r3, [pc, #388]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004b46:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	011c      	lsls	r4, r3, #4
 8004b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b60:	4642      	mov	r2, r8
 8004b62:	464b      	mov	r3, r9
 8004b64:	1891      	adds	r1, r2, r2
 8004b66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b68:	415b      	adcs	r3, r3
 8004b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b70:	4641      	mov	r1, r8
 8004b72:	eb12 0a01 	adds.w	sl, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb43 0b01 	adc.w	fp, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b90:	4692      	mov	sl, r2
 8004b92:	469b      	mov	fp, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	eb1a 0303 	adds.w	r3, sl, r3
 8004b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8004ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	18db      	adds	r3, r3, r3
 8004bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bd2:	f7fb ffe7 	bl	8000ba4 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004bde:	fba3 2301 	umull	r2, r3, r3, r1
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2264      	movs	r2, #100	@ 0x64
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	1acb      	subs	r3, r1, r3
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bf2:	4b36      	ldr	r3, [pc, #216]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004c00:	441c      	add	r4, r3
 8004c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c14:	4642      	mov	r2, r8
 8004c16:	464b      	mov	r3, r9
 8004c18:	1891      	adds	r1, r2, r2
 8004c1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c24:	4641      	mov	r1, r8
 8004c26:	1851      	adds	r1, r2, r1
 8004c28:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	414b      	adcs	r3, r1
 8004c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	00cb      	lsls	r3, r1, #3
 8004c40:	4651      	mov	r1, sl
 8004c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c46:	4651      	mov	r1, sl
 8004c48:	00ca      	lsls	r2, r1, #3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	4642      	mov	r2, r8
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c58:	464b      	mov	r3, r9
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	eb42 0303 	adc.w	r3, r2, r3
 8004c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c78:	460b      	mov	r3, r1
 8004c7a:	18db      	adds	r3, r3, r3
 8004c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c7e:	4613      	mov	r3, r2
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c8e:	f7fb ff89 	bl	8000ba4 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	@ 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	3332      	adds	r3, #50	@ 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	@ (8004ccc <UART_SetConfig+0x2d4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 0207 	and.w	r2, r3, #7
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4422      	add	r2, r4
 8004cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cc0:	e106      	b.n	8004ed0 <UART_SetConfig+0x4d8>
 8004cc2:	bf00      	nop
 8004cc4:	40011000 	.word	0x40011000
 8004cc8:	40011400 	.word	0x40011400
 8004ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	6239      	str	r1, [r7, #32]
 8004cea:	415b      	adcs	r3, r3
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	1854      	adds	r4, r2, r1
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	eb43 0501 	adc.w	r5, r3, r1
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	00eb      	lsls	r3, r5, #3
 8004d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	18e3      	adds	r3, r4, r3
 8004d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d18:	464b      	mov	r3, r9
 8004d1a:	eb45 0303 	adc.w	r3, r5, r3
 8004d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d3e:	4629      	mov	r1, r5
 8004d40:	008b      	lsls	r3, r1, #2
 8004d42:	4621      	mov	r1, r4
 8004d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d48:	4621      	mov	r1, r4
 8004d4a:	008a      	lsls	r2, r1, #2
 8004d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d50:	f7fb ff28 	bl	8000ba4 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4b60      	ldr	r3, [pc, #384]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	011c      	lsls	r4, r3, #4
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	61b9      	str	r1, [r7, #24]
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	6139      	str	r1, [r7, #16]
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ddc:	4649      	mov	r1, r9
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	4641      	mov	r1, r8
 8004de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de6:	4641      	mov	r1, r8
 8004de8:	008a      	lsls	r2, r1, #2
 8004dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004dee:	f7fb fed9 	bl	8000ba4 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4611      	mov	r1, r2
 8004df8:	4b38      	ldr	r3, [pc, #224]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	2264      	movs	r2, #100	@ 0x64
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	1acb      	subs	r3, r1, r3
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	3332      	adds	r3, #50	@ 0x32
 8004e0c:	4a33      	ldr	r2, [pc, #204]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e18:	441c      	add	r4, r3
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e22:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e28:	4642      	mov	r2, r8
 8004e2a:	464b      	mov	r3, r9
 8004e2c:	1891      	adds	r1, r2, r2
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	415b      	adcs	r3, r3
 8004e32:	60fb      	str	r3, [r7, #12]
 8004e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e38:	4641      	mov	r1, r8
 8004e3a:	1851      	adds	r1, r2, r1
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	4649      	mov	r1, r9
 8004e40:	414b      	adcs	r3, r1
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e50:	4659      	mov	r1, fp
 8004e52:	00cb      	lsls	r3, r1, #3
 8004e54:	4651      	mov	r1, sl
 8004e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	00ca      	lsls	r2, r1, #3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	4603      	mov	r3, r0
 8004e64:	4642      	mov	r2, r8
 8004e66:	189b      	adds	r3, r3, r2
 8004e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	460a      	mov	r2, r1
 8004e6e:	eb42 0303 	adc.w	r3, r2, r3
 8004e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	008b      	lsls	r3, r1, #2
 8004e90:	4641      	mov	r1, r8
 8004e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e96:	4641      	mov	r1, r8
 8004e98:	008a      	lsls	r2, r1, #2
 8004e9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e9e:	f7fb fe81 	bl	8000ba4 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	@ 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	3332      	adds	r3, #50	@ 0x32
 8004eba:	4a08      	ldr	r2, [pc, #32]	@ (8004edc <UART_SetConfig+0x4e4>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 020f 	and.w	r2, r3, #15
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4422      	add	r2, r4
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004edc:	51eb851f 	.word	0x51eb851f

08004ee0 <memset>:
 8004ee0:	4402      	add	r2, r0
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d100      	bne.n	8004eea <memset+0xa>
 8004ee8:	4770      	bx	lr
 8004eea:	f803 1b01 	strb.w	r1, [r3], #1
 8004eee:	e7f9      	b.n	8004ee4 <memset+0x4>

08004ef0 <__libc_init_array>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	4d0d      	ldr	r5, [pc, #52]	@ (8004f28 <__libc_init_array+0x38>)
 8004ef4:	4c0d      	ldr	r4, [pc, #52]	@ (8004f2c <__libc_init_array+0x3c>)
 8004ef6:	1b64      	subs	r4, r4, r5
 8004ef8:	10a4      	asrs	r4, r4, #2
 8004efa:	2600      	movs	r6, #0
 8004efc:	42a6      	cmp	r6, r4
 8004efe:	d109      	bne.n	8004f14 <__libc_init_array+0x24>
 8004f00:	4d0b      	ldr	r5, [pc, #44]	@ (8004f30 <__libc_init_array+0x40>)
 8004f02:	4c0c      	ldr	r4, [pc, #48]	@ (8004f34 <__libc_init_array+0x44>)
 8004f04:	f001 f8a8 	bl	8006058 <_init>
 8004f08:	1b64      	subs	r4, r4, r5
 8004f0a:	10a4      	asrs	r4, r4, #2
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	42a6      	cmp	r6, r4
 8004f10:	d105      	bne.n	8004f1e <__libc_init_array+0x2e>
 8004f12:	bd70      	pop	{r4, r5, r6, pc}
 8004f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f18:	4798      	blx	r3
 8004f1a:	3601      	adds	r6, #1
 8004f1c:	e7ee      	b.n	8004efc <__libc_init_array+0xc>
 8004f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f22:	4798      	blx	r3
 8004f24:	3601      	adds	r6, #1
 8004f26:	e7f2      	b.n	8004f0e <__libc_init_array+0x1e>
 8004f28:	08006270 	.word	0x08006270
 8004f2c:	08006270 	.word	0x08006270
 8004f30:	08006270 	.word	0x08006270
 8004f34:	08006274 	.word	0x08006274

08004f38 <tan>:
 8004f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f3a:	ec53 2b10 	vmov	r2, r3, d0
 8004f3e:	4816      	ldr	r0, [pc, #88]	@ (8004f98 <tan+0x60>)
 8004f40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004f44:	4281      	cmp	r1, r0
 8004f46:	d807      	bhi.n	8004f58 <tan+0x20>
 8004f48:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8004f90 <tan+0x58>
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	b005      	add	sp, #20
 8004f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f54:	f000 b824 	b.w	8004fa0 <__kernel_tan>
 8004f58:	4810      	ldr	r0, [pc, #64]	@ (8004f9c <tan+0x64>)
 8004f5a:	4281      	cmp	r1, r0
 8004f5c:	d908      	bls.n	8004f70 <tan+0x38>
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	f7fb f935 	bl	80001d0 <__aeabi_dsub>
 8004f66:	ec41 0b10 	vmov	d0, r0, r1
 8004f6a:	b005      	add	sp, #20
 8004f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f70:	4668      	mov	r0, sp
 8004f72:	f000 fa19 	bl	80053a8 <__ieee754_rem_pio2>
 8004f76:	0040      	lsls	r0, r0, #1
 8004f78:	f000 0002 	and.w	r0, r0, #2
 8004f7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f80:	ed9d 0b00 	vldr	d0, [sp]
 8004f84:	f1c0 0001 	rsb	r0, r0, #1
 8004f88:	f000 f80a 	bl	8004fa0 <__kernel_tan>
 8004f8c:	e7ed      	b.n	8004f6a <tan+0x32>
 8004f8e:	bf00      	nop
	...
 8004f98:	3fe921fb 	.word	0x3fe921fb
 8004f9c:	7fefffff 	.word	0x7fefffff

08004fa0 <__kernel_tan>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	ec5b ab10 	vmov	sl, fp, d0
 8004fa8:	4bdb      	ldr	r3, [pc, #876]	@ (8005318 <__kernel_tan+0x378>)
 8004faa:	b089      	sub	sp, #36	@ 0x24
 8004fac:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 8004fb0:	429f      	cmp	r7, r3
 8004fb2:	ec59 8b11 	vmov	r8, r9, d1
 8004fb6:	4606      	mov	r6, r0
 8004fb8:	f8cd b008 	str.w	fp, [sp, #8]
 8004fbc:	d85d      	bhi.n	800507a <__kernel_tan+0xda>
 8004fbe:	4650      	mov	r0, sl
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	f7fb fd57 	bl	8000a74 <__aeabi_d2iz>
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d17c      	bne.n	80050c6 <__kernel_tan+0x126>
 8004fcc:	1c73      	adds	r3, r6, #1
 8004fce:	4652      	mov	r2, sl
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	433b      	orrs	r3, r7
 8004fd4:	d110      	bne.n	8004ff8 <__kernel_tan+0x58>
 8004fd6:	ec4b ab10 	vmov	d0, sl, fp
 8004fda:	f000 fbe1 	bl	80057a0 <fabs>
 8004fde:	49cf      	ldr	r1, [pc, #828]	@ (800531c <__kernel_tan+0x37c>)
 8004fe0:	ec53 2b10 	vmov	r2, r3, d0
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7fb fbd5 	bl	8000794 <__aeabi_ddiv>
 8004fea:	4682      	mov	sl, r0
 8004fec:	468b      	mov	fp, r1
 8004fee:	ec4b ab10 	vmov	d0, sl, fp
 8004ff2:	b009      	add	sp, #36	@ 0x24
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	2e01      	cmp	r6, #1
 8004ffa:	d0f8      	beq.n	8004fee <__kernel_tan+0x4e>
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	464b      	mov	r3, r9
 8005000:	4650      	mov	r0, sl
 8005002:	4659      	mov	r1, fp
 8005004:	f7fb f8e6 	bl	80001d4 <__adddf3>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	460f      	mov	r7, r1
 800500e:	2000      	movs	r0, #0
 8005010:	49c3      	ldr	r1, [pc, #780]	@ (8005320 <__kernel_tan+0x380>)
 8005012:	f7fb fbbf 	bl	8000794 <__aeabi_ddiv>
 8005016:	e9cd 0100 	strd	r0, r1, [sp]
 800501a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800501e:	462e      	mov	r6, r5
 8005020:	4652      	mov	r2, sl
 8005022:	462c      	mov	r4, r5
 8005024:	4630      	mov	r0, r6
 8005026:	461d      	mov	r5, r3
 8005028:	4639      	mov	r1, r7
 800502a:	465b      	mov	r3, fp
 800502c:	f7fb f8d0 	bl	80001d0 <__aeabi_dsub>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4640      	mov	r0, r8
 8005036:	4649      	mov	r1, r9
 8005038:	f7fb f8ca 	bl	80001d0 <__aeabi_dsub>
 800503c:	4632      	mov	r2, r6
 800503e:	462b      	mov	r3, r5
 8005040:	f7fb fa7e 	bl	8000540 <__aeabi_dmul>
 8005044:	4632      	mov	r2, r6
 8005046:	4682      	mov	sl, r0
 8005048:	468b      	mov	fp, r1
 800504a:	462b      	mov	r3, r5
 800504c:	4630      	mov	r0, r6
 800504e:	4639      	mov	r1, r7
 8005050:	f7fb fa76 	bl	8000540 <__aeabi_dmul>
 8005054:	4bb1      	ldr	r3, [pc, #708]	@ (800531c <__kernel_tan+0x37c>)
 8005056:	2200      	movs	r2, #0
 8005058:	f7fb f8bc 	bl	80001d4 <__adddf3>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4650      	mov	r0, sl
 8005062:	4659      	mov	r1, fp
 8005064:	f7fb f8b6 	bl	80001d4 <__adddf3>
 8005068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800506c:	f7fb fa68 	bl	8000540 <__aeabi_dmul>
 8005070:	4622      	mov	r2, r4
 8005072:	462b      	mov	r3, r5
 8005074:	f7fb f8ae 	bl	80001d4 <__adddf3>
 8005078:	e7b7      	b.n	8004fea <__kernel_tan+0x4a>
 800507a:	4baa      	ldr	r3, [pc, #680]	@ (8005324 <__kernel_tan+0x384>)
 800507c:	429f      	cmp	r7, r3
 800507e:	d922      	bls.n	80050c6 <__kernel_tan+0x126>
 8005080:	9b02      	ldr	r3, [sp, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	da05      	bge.n	8005092 <__kernel_tan+0xf2>
 8005086:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800508a:	469b      	mov	fp, r3
 800508c:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005090:	4699      	mov	r9, r3
 8005092:	4652      	mov	r2, sl
 8005094:	465b      	mov	r3, fp
 8005096:	a182      	add	r1, pc, #520	@ (adr r1, 80052a0 <__kernel_tan+0x300>)
 8005098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800509c:	f7fb f898 	bl	80001d0 <__aeabi_dsub>
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	4604      	mov	r4, r0
 80050a6:	460d      	mov	r5, r1
 80050a8:	a17f      	add	r1, pc, #508	@ (adr r1, 80052a8 <__kernel_tan+0x308>)
 80050aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ae:	f7fb f88f 	bl	80001d0 <__aeabi_dsub>
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	f7fb f88d 	bl	80001d4 <__adddf3>
 80050ba:	f04f 0800 	mov.w	r8, #0
 80050be:	4682      	mov	sl, r0
 80050c0:	468b      	mov	fp, r1
 80050c2:	f04f 0900 	mov.w	r9, #0
 80050c6:	4652      	mov	r2, sl
 80050c8:	465b      	mov	r3, fp
 80050ca:	4650      	mov	r0, sl
 80050cc:	4659      	mov	r1, fp
 80050ce:	f7fb fa37 	bl	8000540 <__aeabi_dmul>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	e9cd 2300 	strd	r2, r3, [sp]
 80050da:	f7fb fa31 	bl	8000540 <__aeabi_dmul>
 80050de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050e2:	4604      	mov	r4, r0
 80050e4:	460d      	mov	r5, r1
 80050e6:	4650      	mov	r0, sl
 80050e8:	4659      	mov	r1, fp
 80050ea:	f7fb fa29 	bl	8000540 <__aeabi_dmul>
 80050ee:	a370      	add	r3, pc, #448	@ (adr r3, 80052b0 <__kernel_tan+0x310>)
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050f8:	4620      	mov	r0, r4
 80050fa:	4629      	mov	r1, r5
 80050fc:	f7fb fa20 	bl	8000540 <__aeabi_dmul>
 8005100:	a36d      	add	r3, pc, #436	@ (adr r3, 80052b8 <__kernel_tan+0x318>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb f865 	bl	80001d4 <__adddf3>
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	f7fb fa17 	bl	8000540 <__aeabi_dmul>
 8005112:	a36b      	add	r3, pc, #428	@ (adr r3, 80052c0 <__kernel_tan+0x320>)
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f7fb f85c 	bl	80001d4 <__adddf3>
 800511c:	4622      	mov	r2, r4
 800511e:	462b      	mov	r3, r5
 8005120:	f7fb fa0e 	bl	8000540 <__aeabi_dmul>
 8005124:	a368      	add	r3, pc, #416	@ (adr r3, 80052c8 <__kernel_tan+0x328>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	f7fb f853 	bl	80001d4 <__adddf3>
 800512e:	4622      	mov	r2, r4
 8005130:	462b      	mov	r3, r5
 8005132:	f7fb fa05 	bl	8000540 <__aeabi_dmul>
 8005136:	a366      	add	r3, pc, #408	@ (adr r3, 80052d0 <__kernel_tan+0x330>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f7fb f84a 	bl	80001d4 <__adddf3>
 8005140:	4622      	mov	r2, r4
 8005142:	462b      	mov	r3, r5
 8005144:	f7fb f9fc 	bl	8000540 <__aeabi_dmul>
 8005148:	a363      	add	r3, pc, #396	@ (adr r3, 80052d8 <__kernel_tan+0x338>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb f841 	bl	80001d4 <__adddf3>
 8005152:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005156:	f7fb f9f3 	bl	8000540 <__aeabi_dmul>
 800515a:	a361      	add	r3, pc, #388	@ (adr r3, 80052e0 <__kernel_tan+0x340>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005164:	4620      	mov	r0, r4
 8005166:	4629      	mov	r1, r5
 8005168:	f7fb f9ea 	bl	8000540 <__aeabi_dmul>
 800516c:	a35e      	add	r3, pc, #376	@ (adr r3, 80052e8 <__kernel_tan+0x348>)
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f7fb f82f 	bl	80001d4 <__adddf3>
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	f7fb f9e1 	bl	8000540 <__aeabi_dmul>
 800517e:	a35c      	add	r3, pc, #368	@ (adr r3, 80052f0 <__kernel_tan+0x350>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f7fb f826 	bl	80001d4 <__adddf3>
 8005188:	4622      	mov	r2, r4
 800518a:	462b      	mov	r3, r5
 800518c:	f7fb f9d8 	bl	8000540 <__aeabi_dmul>
 8005190:	a359      	add	r3, pc, #356	@ (adr r3, 80052f8 <__kernel_tan+0x358>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7fb f81d 	bl	80001d4 <__adddf3>
 800519a:	4622      	mov	r2, r4
 800519c:	462b      	mov	r3, r5
 800519e:	f7fb f9cf 	bl	8000540 <__aeabi_dmul>
 80051a2:	a357      	add	r3, pc, #348	@ (adr r3, 8005300 <__kernel_tan+0x360>)
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f7fb f814 	bl	80001d4 <__adddf3>
 80051ac:	4622      	mov	r2, r4
 80051ae:	462b      	mov	r3, r5
 80051b0:	f7fb f9c6 	bl	8000540 <__aeabi_dmul>
 80051b4:	a354      	add	r3, pc, #336	@ (adr r3, 8005308 <__kernel_tan+0x368>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f7fb f80b 	bl	80001d4 <__adddf3>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051c6:	f7fb f805 	bl	80001d4 <__adddf3>
 80051ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ce:	f7fb f9b7 	bl	8000540 <__aeabi_dmul>
 80051d2:	4642      	mov	r2, r8
 80051d4:	464b      	mov	r3, r9
 80051d6:	f7fa fffd 	bl	80001d4 <__adddf3>
 80051da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051de:	f7fb f9af 	bl	8000540 <__aeabi_dmul>
 80051e2:	4642      	mov	r2, r8
 80051e4:	464b      	mov	r3, r9
 80051e6:	f7fa fff5 	bl	80001d4 <__adddf3>
 80051ea:	a349      	add	r3, pc, #292	@ (adr r3, 8005310 <__kernel_tan+0x370>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	4604      	mov	r4, r0
 80051f2:	460d      	mov	r5, r1
 80051f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051f8:	f7fb f9a2 	bl	8000540 <__aeabi_dmul>
 80051fc:	4622      	mov	r2, r4
 80051fe:	462b      	mov	r3, r5
 8005200:	f7fa ffe8 	bl	80001d4 <__adddf3>
 8005204:	e9cd 0100 	strd	r0, r1, [sp]
 8005208:	460b      	mov	r3, r1
 800520a:	4602      	mov	r2, r0
 800520c:	4659      	mov	r1, fp
 800520e:	4650      	mov	r0, sl
 8005210:	f7fa ffe0 	bl	80001d4 <__adddf3>
 8005214:	4b43      	ldr	r3, [pc, #268]	@ (8005324 <__kernel_tan+0x384>)
 8005216:	429f      	cmp	r7, r3
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
 800521c:	f240 8084 	bls.w	8005328 <__kernel_tan+0x388>
 8005220:	4630      	mov	r0, r6
 8005222:	f7fb f923 	bl	800046c <__aeabi_i2d>
 8005226:	4622      	mov	r2, r4
 8005228:	4680      	mov	r8, r0
 800522a:	4689      	mov	r9, r1
 800522c:	462b      	mov	r3, r5
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb f985 	bl	8000540 <__aeabi_dmul>
 8005236:	4642      	mov	r2, r8
 8005238:	4606      	mov	r6, r0
 800523a:	460f      	mov	r7, r1
 800523c:	464b      	mov	r3, r9
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	f7fa ffc7 	bl	80001d4 <__adddf3>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4630      	mov	r0, r6
 800524c:	4639      	mov	r1, r7
 800524e:	f7fb faa1 	bl	8000794 <__aeabi_ddiv>
 8005252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005256:	f7fa ffbb 	bl	80001d0 <__aeabi_dsub>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4650      	mov	r0, sl
 8005260:	4659      	mov	r1, fp
 8005262:	f7fa ffb5 	bl	80001d0 <__aeabi_dsub>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	f7fa ffb3 	bl	80001d4 <__adddf3>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4640      	mov	r0, r8
 8005274:	4649      	mov	r1, r9
 8005276:	f7fa ffab 	bl	80001d0 <__aeabi_dsub>
 800527a:	9b02      	ldr	r3, [sp, #8]
 800527c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005280:	f00a 0a02 	and.w	sl, sl, #2
 8005284:	4604      	mov	r4, r0
 8005286:	f1ca 0001 	rsb	r0, sl, #1
 800528a:	460d      	mov	r5, r1
 800528c:	f7fb f8ee 	bl	800046c <__aeabi_i2d>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4620      	mov	r0, r4
 8005296:	4629      	mov	r1, r5
 8005298:	f7fb f952 	bl	8000540 <__aeabi_dmul>
 800529c:	e6a5      	b.n	8004fea <__kernel_tan+0x4a>
 800529e:	bf00      	nop
 80052a0:	54442d18 	.word	0x54442d18
 80052a4:	3fe921fb 	.word	0x3fe921fb
 80052a8:	33145c07 	.word	0x33145c07
 80052ac:	3c81a626 	.word	0x3c81a626
 80052b0:	74bf7ad4 	.word	0x74bf7ad4
 80052b4:	3efb2a70 	.word	0x3efb2a70
 80052b8:	32f0a7e9 	.word	0x32f0a7e9
 80052bc:	3f12b80f 	.word	0x3f12b80f
 80052c0:	1a8d1068 	.word	0x1a8d1068
 80052c4:	3f3026f7 	.word	0x3f3026f7
 80052c8:	fee08315 	.word	0xfee08315
 80052cc:	3f57dbc8 	.word	0x3f57dbc8
 80052d0:	e96e8493 	.word	0xe96e8493
 80052d4:	3f8226e3 	.word	0x3f8226e3
 80052d8:	1bb341fe 	.word	0x1bb341fe
 80052dc:	3faba1ba 	.word	0x3faba1ba
 80052e0:	db605373 	.word	0xdb605373
 80052e4:	bef375cb 	.word	0xbef375cb
 80052e8:	a03792a6 	.word	0xa03792a6
 80052ec:	3f147e88 	.word	0x3f147e88
 80052f0:	f2f26501 	.word	0xf2f26501
 80052f4:	3f4344d8 	.word	0x3f4344d8
 80052f8:	c9560328 	.word	0xc9560328
 80052fc:	3f6d6d22 	.word	0x3f6d6d22
 8005300:	8406d637 	.word	0x8406d637
 8005304:	3f9664f4 	.word	0x3f9664f4
 8005308:	1110fe7a 	.word	0x1110fe7a
 800530c:	3fc11111 	.word	0x3fc11111
 8005310:	55555563 	.word	0x55555563
 8005314:	3fd55555 	.word	0x3fd55555
 8005318:	3e2fffff 	.word	0x3e2fffff
 800531c:	3ff00000 	.word	0x3ff00000
 8005320:	bff00000 	.word	0xbff00000
 8005324:	3fe59427 	.word	0x3fe59427
 8005328:	2e01      	cmp	r6, #1
 800532a:	d033      	beq.n	8005394 <__kernel_tan+0x3f4>
 800532c:	f04f 0800 	mov.w	r8, #0
 8005330:	4689      	mov	r9, r1
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	2000      	movs	r0, #0
 8005338:	4918      	ldr	r1, [pc, #96]	@ (800539c <__kernel_tan+0x3fc>)
 800533a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800533e:	f7fb fa29 	bl	8000794 <__aeabi_ddiv>
 8005342:	4652      	mov	r2, sl
 8005344:	460f      	mov	r7, r1
 8005346:	465b      	mov	r3, fp
 8005348:	4606      	mov	r6, r0
 800534a:	460d      	mov	r5, r1
 800534c:	4640      	mov	r0, r8
 800534e:	4649      	mov	r1, r9
 8005350:	f7fa ff3e 	bl	80001d0 <__aeabi_dsub>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800535c:	f7fa ff38 	bl	80001d0 <__aeabi_dsub>
 8005360:	4642      	mov	r2, r8
 8005362:	463b      	mov	r3, r7
 8005364:	f7fb f8ec 	bl	8000540 <__aeabi_dmul>
 8005368:	4642      	mov	r2, r8
 800536a:	4682      	mov	sl, r0
 800536c:	468b      	mov	fp, r1
 800536e:	463b      	mov	r3, r7
 8005370:	4640      	mov	r0, r8
 8005372:	4649      	mov	r1, r9
 8005374:	f7fb f8e4 	bl	8000540 <__aeabi_dmul>
 8005378:	4b09      	ldr	r3, [pc, #36]	@ (80053a0 <__kernel_tan+0x400>)
 800537a:	2200      	movs	r2, #0
 800537c:	f7fa ff2a 	bl	80001d4 <__adddf3>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4650      	mov	r0, sl
 8005386:	4659      	mov	r1, fp
 8005388:	f7fa ff24 	bl	80001d4 <__adddf3>
 800538c:	4644      	mov	r4, r8
 800538e:	4632      	mov	r2, r6
 8005390:	463b      	mov	r3, r7
 8005392:	e66b      	b.n	800506c <__kernel_tan+0xcc>
 8005394:	4682      	mov	sl, r0
 8005396:	468b      	mov	fp, r1
 8005398:	e629      	b.n	8004fee <__kernel_tan+0x4e>
 800539a:	bf00      	nop
 800539c:	bff00000 	.word	0xbff00000
 80053a0:	3ff00000 	.word	0x3ff00000
 80053a4:	00000000 	.word	0x00000000

080053a8 <__ieee754_rem_pio2>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	ec57 6b10 	vmov	r6, r7, d0
 80053b0:	4bc5      	ldr	r3, [pc, #788]	@ (80056c8 <__ieee754_rem_pio2+0x320>)
 80053b2:	b08d      	sub	sp, #52	@ 0x34
 80053b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80053b8:	4598      	cmp	r8, r3
 80053ba:	4604      	mov	r4, r0
 80053bc:	9704      	str	r7, [sp, #16]
 80053be:	d807      	bhi.n	80053d0 <__ieee754_rem_pio2+0x28>
 80053c0:	2200      	movs	r2, #0
 80053c2:	2300      	movs	r3, #0
 80053c4:	ed80 0b00 	vstr	d0, [r0]
 80053c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80053cc:	2500      	movs	r5, #0
 80053ce:	e028      	b.n	8005422 <__ieee754_rem_pio2+0x7a>
 80053d0:	4bbe      	ldr	r3, [pc, #760]	@ (80056cc <__ieee754_rem_pio2+0x324>)
 80053d2:	4598      	cmp	r8, r3
 80053d4:	d878      	bhi.n	80054c8 <__ieee754_rem_pio2+0x120>
 80053d6:	9b04      	ldr	r3, [sp, #16]
 80053d8:	4dbd      	ldr	r5, [pc, #756]	@ (80056d0 <__ieee754_rem_pio2+0x328>)
 80053da:	2b00      	cmp	r3, #0
 80053dc:	4630      	mov	r0, r6
 80053de:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005690 <__ieee754_rem_pio2+0x2e8>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	4639      	mov	r1, r7
 80053e6:	dd38      	ble.n	800545a <__ieee754_rem_pio2+0xb2>
 80053e8:	f7fa fef2 	bl	80001d0 <__aeabi_dsub>
 80053ec:	45a8      	cmp	r8, r5
 80053ee:	4606      	mov	r6, r0
 80053f0:	460f      	mov	r7, r1
 80053f2:	d01a      	beq.n	800542a <__ieee754_rem_pio2+0x82>
 80053f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005698 <__ieee754_rem_pio2+0x2f0>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f7fa fee9 	bl	80001d0 <__aeabi_dsub>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4680      	mov	r8, r0
 8005404:	4689      	mov	r9, r1
 8005406:	4630      	mov	r0, r6
 8005408:	4639      	mov	r1, r7
 800540a:	f7fa fee1 	bl	80001d0 <__aeabi_dsub>
 800540e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005698 <__ieee754_rem_pio2+0x2f0>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fa fedc 	bl	80001d0 <__aeabi_dsub>
 8005418:	e9c4 8900 	strd	r8, r9, [r4]
 800541c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005420:	2501      	movs	r5, #1
 8005422:	4628      	mov	r0, r5
 8005424:	b00d      	add	sp, #52	@ 0x34
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542a:	a39d      	add	r3, pc, #628	@ (adr r3, 80056a0 <__ieee754_rem_pio2+0x2f8>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fa fece 	bl	80001d0 <__aeabi_dsub>
 8005434:	a39c      	add	r3, pc, #624	@ (adr r3, 80056a8 <__ieee754_rem_pio2+0x300>)
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	4606      	mov	r6, r0
 800543c:	460f      	mov	r7, r1
 800543e:	f7fa fec7 	bl	80001d0 <__aeabi_dsub>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4680      	mov	r8, r0
 8005448:	4689      	mov	r9, r1
 800544a:	4630      	mov	r0, r6
 800544c:	4639      	mov	r1, r7
 800544e:	f7fa febf 	bl	80001d0 <__aeabi_dsub>
 8005452:	a395      	add	r3, pc, #596	@ (adr r3, 80056a8 <__ieee754_rem_pio2+0x300>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	e7dc      	b.n	8005414 <__ieee754_rem_pio2+0x6c>
 800545a:	f7fa febb 	bl	80001d4 <__adddf3>
 800545e:	45a8      	cmp	r8, r5
 8005460:	4606      	mov	r6, r0
 8005462:	460f      	mov	r7, r1
 8005464:	d018      	beq.n	8005498 <__ieee754_rem_pio2+0xf0>
 8005466:	a38c      	add	r3, pc, #560	@ (adr r3, 8005698 <__ieee754_rem_pio2+0x2f0>)
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	f7fa feb2 	bl	80001d4 <__adddf3>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4680      	mov	r8, r0
 8005476:	4689      	mov	r9, r1
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fa fea8 	bl	80001d0 <__aeabi_dsub>
 8005480:	a385      	add	r3, pc, #532	@ (adr r3, 8005698 <__ieee754_rem_pio2+0x2f0>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fa fea5 	bl	80001d4 <__adddf3>
 800548a:	f04f 35ff 	mov.w	r5, #4294967295
 800548e:	e9c4 8900 	strd	r8, r9, [r4]
 8005492:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005496:	e7c4      	b.n	8005422 <__ieee754_rem_pio2+0x7a>
 8005498:	a381      	add	r3, pc, #516	@ (adr r3, 80056a0 <__ieee754_rem_pio2+0x2f8>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fa fe99 	bl	80001d4 <__adddf3>
 80054a2:	a381      	add	r3, pc, #516	@ (adr r3, 80056a8 <__ieee754_rem_pio2+0x300>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	f7fa fe92 	bl	80001d4 <__adddf3>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4680      	mov	r8, r0
 80054b6:	4689      	mov	r9, r1
 80054b8:	4630      	mov	r0, r6
 80054ba:	4639      	mov	r1, r7
 80054bc:	f7fa fe88 	bl	80001d0 <__aeabi_dsub>
 80054c0:	a379      	add	r3, pc, #484	@ (adr r3, 80056a8 <__ieee754_rem_pio2+0x300>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	e7de      	b.n	8005486 <__ieee754_rem_pio2+0xde>
 80054c8:	4b82      	ldr	r3, [pc, #520]	@ (80056d4 <__ieee754_rem_pio2+0x32c>)
 80054ca:	4598      	cmp	r8, r3
 80054cc:	f200 80d1 	bhi.w	8005672 <__ieee754_rem_pio2+0x2ca>
 80054d0:	f000 f966 	bl	80057a0 <fabs>
 80054d4:	ec57 6b10 	vmov	r6, r7, d0
 80054d8:	a375      	add	r3, pc, #468	@ (adr r3, 80056b0 <__ieee754_rem_pio2+0x308>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	4630      	mov	r0, r6
 80054e0:	4639      	mov	r1, r7
 80054e2:	f7fb f82d 	bl	8000540 <__aeabi_dmul>
 80054e6:	4b7c      	ldr	r3, [pc, #496]	@ (80056d8 <__ieee754_rem_pio2+0x330>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	f7fa fe73 	bl	80001d4 <__adddf3>
 80054ee:	f7fb fac1 	bl	8000a74 <__aeabi_d2iz>
 80054f2:	4605      	mov	r5, r0
 80054f4:	f7fa ffba 	bl	800046c <__aeabi_i2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005500:	a363      	add	r3, pc, #396	@ (adr r3, 8005690 <__ieee754_rem_pio2+0x2e8>)
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f7fb f81b 	bl	8000540 <__aeabi_dmul>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4630      	mov	r0, r6
 8005510:	4639      	mov	r1, r7
 8005512:	f7fa fe5d 	bl	80001d0 <__aeabi_dsub>
 8005516:	a360      	add	r3, pc, #384	@ (adr r3, 8005698 <__ieee754_rem_pio2+0x2f0>)
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	4682      	mov	sl, r0
 800551e:	468b      	mov	fp, r1
 8005520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005524:	f7fb f80c 	bl	8000540 <__aeabi_dmul>
 8005528:	2d1f      	cmp	r5, #31
 800552a:	4606      	mov	r6, r0
 800552c:	460f      	mov	r7, r1
 800552e:	dc0c      	bgt.n	800554a <__ieee754_rem_pio2+0x1a2>
 8005530:	4b6a      	ldr	r3, [pc, #424]	@ (80056dc <__ieee754_rem_pio2+0x334>)
 8005532:	1e6a      	subs	r2, r5, #1
 8005534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005538:	4543      	cmp	r3, r8
 800553a:	d006      	beq.n	800554a <__ieee754_rem_pio2+0x1a2>
 800553c:	4632      	mov	r2, r6
 800553e:	463b      	mov	r3, r7
 8005540:	4650      	mov	r0, sl
 8005542:	4659      	mov	r1, fp
 8005544:	f7fa fe44 	bl	80001d0 <__aeabi_dsub>
 8005548:	e00e      	b.n	8005568 <__ieee754_rem_pio2+0x1c0>
 800554a:	463b      	mov	r3, r7
 800554c:	4632      	mov	r2, r6
 800554e:	4650      	mov	r0, sl
 8005550:	4659      	mov	r1, fp
 8005552:	f7fa fe3d 	bl	80001d0 <__aeabi_dsub>
 8005556:	ea4f 5328 	mov.w	r3, r8, asr #20
 800555a:	9305      	str	r3, [sp, #20]
 800555c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005560:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005564:	2b10      	cmp	r3, #16
 8005566:	dc02      	bgt.n	800556e <__ieee754_rem_pio2+0x1c6>
 8005568:	e9c4 0100 	strd	r0, r1, [r4]
 800556c:	e039      	b.n	80055e2 <__ieee754_rem_pio2+0x23a>
 800556e:	a34c      	add	r3, pc, #304	@ (adr r3, 80056a0 <__ieee754_rem_pio2+0x2f8>)
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005578:	f7fa ffe2 	bl	8000540 <__aeabi_dmul>
 800557c:	4606      	mov	r6, r0
 800557e:	460f      	mov	r7, r1
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4650      	mov	r0, sl
 8005586:	4659      	mov	r1, fp
 8005588:	f7fa fe22 	bl	80001d0 <__aeabi_dsub>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4680      	mov	r8, r0
 8005592:	4689      	mov	r9, r1
 8005594:	4650      	mov	r0, sl
 8005596:	4659      	mov	r1, fp
 8005598:	f7fa fe1a 	bl	80001d0 <__aeabi_dsub>
 800559c:	4632      	mov	r2, r6
 800559e:	463b      	mov	r3, r7
 80055a0:	f7fa fe16 	bl	80001d0 <__aeabi_dsub>
 80055a4:	a340      	add	r3, pc, #256	@ (adr r3, 80056a8 <__ieee754_rem_pio2+0x300>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	4606      	mov	r6, r0
 80055ac:	460f      	mov	r7, r1
 80055ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b2:	f7fa ffc5 	bl	8000540 <__aeabi_dmul>
 80055b6:	4632      	mov	r2, r6
 80055b8:	463b      	mov	r3, r7
 80055ba:	f7fa fe09 	bl	80001d0 <__aeabi_dsub>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4606      	mov	r6, r0
 80055c4:	460f      	mov	r7, r1
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fa fe01 	bl	80001d0 <__aeabi_dsub>
 80055ce:	9a05      	ldr	r2, [sp, #20]
 80055d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b31      	cmp	r3, #49	@ 0x31
 80055d8:	dc20      	bgt.n	800561c <__ieee754_rem_pio2+0x274>
 80055da:	e9c4 0100 	strd	r0, r1, [r4]
 80055de:	46c2      	mov	sl, r8
 80055e0:	46cb      	mov	fp, r9
 80055e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80055e6:	4650      	mov	r0, sl
 80055e8:	4642      	mov	r2, r8
 80055ea:	464b      	mov	r3, r9
 80055ec:	4659      	mov	r1, fp
 80055ee:	f7fa fdef 	bl	80001d0 <__aeabi_dsub>
 80055f2:	463b      	mov	r3, r7
 80055f4:	4632      	mov	r2, r6
 80055f6:	f7fa fdeb 	bl	80001d0 <__aeabi_dsub>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005602:	f6bf af0e 	bge.w	8005422 <__ieee754_rem_pio2+0x7a>
 8005606:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800560a:	6063      	str	r3, [r4, #4]
 800560c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005610:	f8c4 8000 	str.w	r8, [r4]
 8005614:	60a0      	str	r0, [r4, #8]
 8005616:	60e3      	str	r3, [r4, #12]
 8005618:	426d      	negs	r5, r5
 800561a:	e702      	b.n	8005422 <__ieee754_rem_pio2+0x7a>
 800561c:	a326      	add	r3, pc, #152	@ (adr r3, 80056b8 <__ieee754_rem_pio2+0x310>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005626:	f7fa ff8b 	bl	8000540 <__aeabi_dmul>
 800562a:	4606      	mov	r6, r0
 800562c:	460f      	mov	r7, r1
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f7fa fdcb 	bl	80001d0 <__aeabi_dsub>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4682      	mov	sl, r0
 8005640:	468b      	mov	fp, r1
 8005642:	4640      	mov	r0, r8
 8005644:	4649      	mov	r1, r9
 8005646:	f7fa fdc3 	bl	80001d0 <__aeabi_dsub>
 800564a:	4632      	mov	r2, r6
 800564c:	463b      	mov	r3, r7
 800564e:	f7fa fdbf 	bl	80001d0 <__aeabi_dsub>
 8005652:	a31b      	add	r3, pc, #108	@ (adr r3, 80056c0 <__ieee754_rem_pio2+0x318>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	4606      	mov	r6, r0
 800565a:	460f      	mov	r7, r1
 800565c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005660:	f7fa ff6e 	bl	8000540 <__aeabi_dmul>
 8005664:	4632      	mov	r2, r6
 8005666:	463b      	mov	r3, r7
 8005668:	f7fa fdb2 	bl	80001d0 <__aeabi_dsub>
 800566c:	4606      	mov	r6, r0
 800566e:	460f      	mov	r7, r1
 8005670:	e764      	b.n	800553c <__ieee754_rem_pio2+0x194>
 8005672:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <__ieee754_rem_pio2+0x338>)
 8005674:	4598      	cmp	r8, r3
 8005676:	d935      	bls.n	80056e4 <__ieee754_rem_pio2+0x33c>
 8005678:	4632      	mov	r2, r6
 800567a:	463b      	mov	r3, r7
 800567c:	4630      	mov	r0, r6
 800567e:	4639      	mov	r1, r7
 8005680:	f7fa fda6 	bl	80001d0 <__aeabi_dsub>
 8005684:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005688:	e9c4 0100 	strd	r0, r1, [r4]
 800568c:	e69e      	b.n	80053cc <__ieee754_rem_pio2+0x24>
 800568e:	bf00      	nop
 8005690:	54400000 	.word	0x54400000
 8005694:	3ff921fb 	.word	0x3ff921fb
 8005698:	1a626331 	.word	0x1a626331
 800569c:	3dd0b461 	.word	0x3dd0b461
 80056a0:	1a600000 	.word	0x1a600000
 80056a4:	3dd0b461 	.word	0x3dd0b461
 80056a8:	2e037073 	.word	0x2e037073
 80056ac:	3ba3198a 	.word	0x3ba3198a
 80056b0:	6dc9c883 	.word	0x6dc9c883
 80056b4:	3fe45f30 	.word	0x3fe45f30
 80056b8:	2e000000 	.word	0x2e000000
 80056bc:	3ba3198a 	.word	0x3ba3198a
 80056c0:	252049c1 	.word	0x252049c1
 80056c4:	397b839a 	.word	0x397b839a
 80056c8:	3fe921fb 	.word	0x3fe921fb
 80056cc:	4002d97b 	.word	0x4002d97b
 80056d0:	3ff921fb 	.word	0x3ff921fb
 80056d4:	413921fb 	.word	0x413921fb
 80056d8:	3fe00000 	.word	0x3fe00000
 80056dc:	08006090 	.word	0x08006090
 80056e0:	7fefffff 	.word	0x7fefffff
 80056e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80056e8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80056ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80056f0:	4630      	mov	r0, r6
 80056f2:	460f      	mov	r7, r1
 80056f4:	f7fb f9be 	bl	8000a74 <__aeabi_d2iz>
 80056f8:	f7fa feb8 	bl	800046c <__aeabi_i2d>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4630      	mov	r0, r6
 8005702:	4639      	mov	r1, r7
 8005704:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005708:	f7fa fd62 	bl	80001d0 <__aeabi_dsub>
 800570c:	4b22      	ldr	r3, [pc, #136]	@ (8005798 <__ieee754_rem_pio2+0x3f0>)
 800570e:	2200      	movs	r2, #0
 8005710:	f7fa ff16 	bl	8000540 <__aeabi_dmul>
 8005714:	460f      	mov	r7, r1
 8005716:	4606      	mov	r6, r0
 8005718:	f7fb f9ac 	bl	8000a74 <__aeabi_d2iz>
 800571c:	f7fa fea6 	bl	800046c <__aeabi_i2d>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4630      	mov	r0, r6
 8005726:	4639      	mov	r1, r7
 8005728:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800572c:	f7fa fd50 	bl	80001d0 <__aeabi_dsub>
 8005730:	4b19      	ldr	r3, [pc, #100]	@ (8005798 <__ieee754_rem_pio2+0x3f0>)
 8005732:	2200      	movs	r2, #0
 8005734:	f7fa ff04 	bl	8000540 <__aeabi_dmul>
 8005738:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800573c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005740:	f04f 0803 	mov.w	r8, #3
 8005744:	2600      	movs	r6, #0
 8005746:	2700      	movs	r7, #0
 8005748:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800574c:	4632      	mov	r2, r6
 800574e:	463b      	mov	r3, r7
 8005750:	46c2      	mov	sl, r8
 8005752:	f108 38ff 	add.w	r8, r8, #4294967295
 8005756:	f7fb f95b 	bl	8000a10 <__aeabi_dcmpeq>
 800575a:	2800      	cmp	r0, #0
 800575c:	d1f4      	bne.n	8005748 <__ieee754_rem_pio2+0x3a0>
 800575e:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <__ieee754_rem_pio2+0x3f4>)
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	2302      	movs	r3, #2
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	462a      	mov	r2, r5
 8005768:	4653      	mov	r3, sl
 800576a:	4621      	mov	r1, r4
 800576c:	a806      	add	r0, sp, #24
 800576e:	f000 f81f 	bl	80057b0 <__kernel_rem_pio2>
 8005772:	9b04      	ldr	r3, [sp, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	4605      	mov	r5, r0
 8005778:	f6bf ae53 	bge.w	8005422 <__ieee754_rem_pio2+0x7a>
 800577c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005780:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005784:	e9c4 2300 	strd	r2, r3, [r4]
 8005788:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800578c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005790:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005794:	e740      	b.n	8005618 <__ieee754_rem_pio2+0x270>
 8005796:	bf00      	nop
 8005798:	41700000 	.word	0x41700000
 800579c:	08006110 	.word	0x08006110

080057a0 <fabs>:
 80057a0:	ec51 0b10 	vmov	r0, r1, d0
 80057a4:	4602      	mov	r2, r0
 80057a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80057aa:	ec43 2b10 	vmov	d0, r2, r3
 80057ae:	4770      	bx	lr

080057b0 <__kernel_rem_pio2>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	ed2d 8b02 	vpush	{d8}
 80057b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80057bc:	f112 0f14 	cmn.w	r2, #20
 80057c0:	9306      	str	r3, [sp, #24]
 80057c2:	9104      	str	r1, [sp, #16]
 80057c4:	4bbe      	ldr	r3, [pc, #760]	@ (8005ac0 <__kernel_rem_pio2+0x310>)
 80057c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80057c8:	9008      	str	r0, [sp, #32]
 80057ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	9b06      	ldr	r3, [sp, #24]
 80057d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80057d6:	bfa8      	it	ge
 80057d8:	1ed4      	subge	r4, r2, #3
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	bfb2      	itee	lt
 80057de:	2400      	movlt	r4, #0
 80057e0:	2318      	movge	r3, #24
 80057e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80057e6:	f06f 0317 	mvn.w	r3, #23
 80057ea:	fb04 3303 	mla	r3, r4, r3, r3
 80057ee:	eb03 0b02 	add.w	fp, r3, r2
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	9a05      	ldr	r2, [sp, #20]
 80057f6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005ab0 <__kernel_rem_pio2+0x300>
 80057fa:	eb03 0802 	add.w	r8, r3, r2
 80057fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005800:	1aa7      	subs	r7, r4, r2
 8005802:	ae20      	add	r6, sp, #128	@ 0x80
 8005804:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005808:	2500      	movs	r5, #0
 800580a:	4545      	cmp	r5, r8
 800580c:	dd13      	ble.n	8005836 <__kernel_rem_pio2+0x86>
 800580e:	9b06      	ldr	r3, [sp, #24]
 8005810:	aa20      	add	r2, sp, #128	@ 0x80
 8005812:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005816:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800581a:	f04f 0800 	mov.w	r8, #0
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	4598      	cmp	r8, r3
 8005822:	dc31      	bgt.n	8005888 <__kernel_rem_pio2+0xd8>
 8005824:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005ab0 <__kernel_rem_pio2+0x300>
 8005828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800582c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005830:	462f      	mov	r7, r5
 8005832:	2600      	movs	r6, #0
 8005834:	e01b      	b.n	800586e <__kernel_rem_pio2+0xbe>
 8005836:	42ef      	cmn	r7, r5
 8005838:	d407      	bmi.n	800584a <__kernel_rem_pio2+0x9a>
 800583a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800583e:	f7fa fe15 	bl	800046c <__aeabi_i2d>
 8005842:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005846:	3501      	adds	r5, #1
 8005848:	e7df      	b.n	800580a <__kernel_rem_pio2+0x5a>
 800584a:	ec51 0b18 	vmov	r0, r1, d8
 800584e:	e7f8      	b.n	8005842 <__kernel_rem_pio2+0x92>
 8005850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005854:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005858:	f7fa fe72 	bl	8000540 <__aeabi_dmul>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005864:	f7fa fcb6 	bl	80001d4 <__adddf3>
 8005868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800586c:	3601      	adds	r6, #1
 800586e:	9b05      	ldr	r3, [sp, #20]
 8005870:	429e      	cmp	r6, r3
 8005872:	f1a7 0708 	sub.w	r7, r7, #8
 8005876:	ddeb      	ble.n	8005850 <__kernel_rem_pio2+0xa0>
 8005878:	ed9d 7b02 	vldr	d7, [sp, #8]
 800587c:	f108 0801 	add.w	r8, r8, #1
 8005880:	ecaa 7b02 	vstmia	sl!, {d7}
 8005884:	3508      	adds	r5, #8
 8005886:	e7ca      	b.n	800581e <__kernel_rem_pio2+0x6e>
 8005888:	9b00      	ldr	r3, [sp, #0]
 800588a:	f8dd 8000 	ldr.w	r8, [sp]
 800588e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005894:	930a      	str	r3, [sp, #40]	@ 0x28
 8005896:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005898:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800589c:	9309      	str	r3, [sp, #36]	@ 0x24
 800589e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80058a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058a4:	ab98      	add	r3, sp, #608	@ 0x260
 80058a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80058aa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80058ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80058b2:	ac0c      	add	r4, sp, #48	@ 0x30
 80058b4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80058b6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80058ba:	46a1      	mov	r9, r4
 80058bc:	46c2      	mov	sl, r8
 80058be:	f1ba 0f00 	cmp.w	sl, #0
 80058c2:	f1a5 0508 	sub.w	r5, r5, #8
 80058c6:	dc77      	bgt.n	80059b8 <__kernel_rem_pio2+0x208>
 80058c8:	4658      	mov	r0, fp
 80058ca:	ed9d 0b02 	vldr	d0, [sp, #8]
 80058ce:	f000 fac7 	bl	8005e60 <scalbn>
 80058d2:	ec57 6b10 	vmov	r6, r7, d0
 80058d6:	2200      	movs	r2, #0
 80058d8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fa fe2e 	bl	8000540 <__aeabi_dmul>
 80058e4:	ec41 0b10 	vmov	d0, r0, r1
 80058e8:	f000 fb3a 	bl	8005f60 <floor>
 80058ec:	4b75      	ldr	r3, [pc, #468]	@ (8005ac4 <__kernel_rem_pio2+0x314>)
 80058ee:	ec51 0b10 	vmov	r0, r1, d0
 80058f2:	2200      	movs	r2, #0
 80058f4:	f7fa fe24 	bl	8000540 <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4630      	mov	r0, r6
 80058fe:	4639      	mov	r1, r7
 8005900:	f7fa fc66 	bl	80001d0 <__aeabi_dsub>
 8005904:	460f      	mov	r7, r1
 8005906:	4606      	mov	r6, r0
 8005908:	f7fb f8b4 	bl	8000a74 <__aeabi_d2iz>
 800590c:	9002      	str	r0, [sp, #8]
 800590e:	f7fa fdad 	bl	800046c <__aeabi_i2d>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4630      	mov	r0, r6
 8005918:	4639      	mov	r1, r7
 800591a:	f7fa fc59 	bl	80001d0 <__aeabi_dsub>
 800591e:	f1bb 0f00 	cmp.w	fp, #0
 8005922:	4606      	mov	r6, r0
 8005924:	460f      	mov	r7, r1
 8005926:	dd6c      	ble.n	8005a02 <__kernel_rem_pio2+0x252>
 8005928:	f108 31ff 	add.w	r1, r8, #4294967295
 800592c:	ab0c      	add	r3, sp, #48	@ 0x30
 800592e:	9d02      	ldr	r5, [sp, #8]
 8005930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005934:	f1cb 0018 	rsb	r0, fp, #24
 8005938:	fa43 f200 	asr.w	r2, r3, r0
 800593c:	4415      	add	r5, r2
 800593e:	4082      	lsls	r2, r0
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	aa0c      	add	r2, sp, #48	@ 0x30
 8005944:	9502      	str	r5, [sp, #8]
 8005946:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800594a:	f1cb 0217 	rsb	r2, fp, #23
 800594e:	fa43 f902 	asr.w	r9, r3, r2
 8005952:	f1b9 0f00 	cmp.w	r9, #0
 8005956:	dd64      	ble.n	8005a22 <__kernel_rem_pio2+0x272>
 8005958:	9b02      	ldr	r3, [sp, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	3301      	adds	r3, #1
 800595e:	9302      	str	r3, [sp, #8]
 8005960:	4615      	mov	r5, r2
 8005962:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005966:	4590      	cmp	r8, r2
 8005968:	f300 80b8 	bgt.w	8005adc <__kernel_rem_pio2+0x32c>
 800596c:	f1bb 0f00 	cmp.w	fp, #0
 8005970:	dd07      	ble.n	8005982 <__kernel_rem_pio2+0x1d2>
 8005972:	f1bb 0f01 	cmp.w	fp, #1
 8005976:	f000 80bf 	beq.w	8005af8 <__kernel_rem_pio2+0x348>
 800597a:	f1bb 0f02 	cmp.w	fp, #2
 800597e:	f000 80c6 	beq.w	8005b0e <__kernel_rem_pio2+0x35e>
 8005982:	f1b9 0f02 	cmp.w	r9, #2
 8005986:	d14c      	bne.n	8005a22 <__kernel_rem_pio2+0x272>
 8005988:	4632      	mov	r2, r6
 800598a:	463b      	mov	r3, r7
 800598c:	494e      	ldr	r1, [pc, #312]	@ (8005ac8 <__kernel_rem_pio2+0x318>)
 800598e:	2000      	movs	r0, #0
 8005990:	f7fa fc1e 	bl	80001d0 <__aeabi_dsub>
 8005994:	4606      	mov	r6, r0
 8005996:	460f      	mov	r7, r1
 8005998:	2d00      	cmp	r5, #0
 800599a:	d042      	beq.n	8005a22 <__kernel_rem_pio2+0x272>
 800599c:	4658      	mov	r0, fp
 800599e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005ab8 <__kernel_rem_pio2+0x308>
 80059a2:	f000 fa5d 	bl	8005e60 <scalbn>
 80059a6:	4630      	mov	r0, r6
 80059a8:	4639      	mov	r1, r7
 80059aa:	ec53 2b10 	vmov	r2, r3, d0
 80059ae:	f7fa fc0f 	bl	80001d0 <__aeabi_dsub>
 80059b2:	4606      	mov	r6, r0
 80059b4:	460f      	mov	r7, r1
 80059b6:	e034      	b.n	8005a22 <__kernel_rem_pio2+0x272>
 80059b8:	4b44      	ldr	r3, [pc, #272]	@ (8005acc <__kernel_rem_pio2+0x31c>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059c0:	f7fa fdbe 	bl	8000540 <__aeabi_dmul>
 80059c4:	f7fb f856 	bl	8000a74 <__aeabi_d2iz>
 80059c8:	f7fa fd50 	bl	800046c <__aeabi_i2d>
 80059cc:	4b40      	ldr	r3, [pc, #256]	@ (8005ad0 <__kernel_rem_pio2+0x320>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	4606      	mov	r6, r0
 80059d2:	460f      	mov	r7, r1
 80059d4:	f7fa fdb4 	bl	8000540 <__aeabi_dmul>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059e0:	f7fa fbf6 	bl	80001d0 <__aeabi_dsub>
 80059e4:	f7fb f846 	bl	8000a74 <__aeabi_d2iz>
 80059e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059ec:	f849 0b04 	str.w	r0, [r9], #4
 80059f0:	4639      	mov	r1, r7
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7fa fbee 	bl	80001d4 <__adddf3>
 80059f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a00:	e75d      	b.n	80058be <__kernel_rem_pio2+0x10e>
 8005a02:	d107      	bne.n	8005a14 <__kernel_rem_pio2+0x264>
 8005a04:	f108 33ff 	add.w	r3, r8, #4294967295
 8005a08:	aa0c      	add	r2, sp, #48	@ 0x30
 8005a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005a12:	e79e      	b.n	8005952 <__kernel_rem_pio2+0x1a2>
 8005a14:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad4 <__kernel_rem_pio2+0x324>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	f7fb f818 	bl	8000a4c <__aeabi_dcmpge>
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	d143      	bne.n	8005aa8 <__kernel_rem_pio2+0x2f8>
 8005a20:	4681      	mov	r9, r0
 8005a22:	2200      	movs	r2, #0
 8005a24:	2300      	movs	r3, #0
 8005a26:	4630      	mov	r0, r6
 8005a28:	4639      	mov	r1, r7
 8005a2a:	f7fa fff1 	bl	8000a10 <__aeabi_dcmpeq>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f000 80bf 	beq.w	8005bb2 <__kernel_rem_pio2+0x402>
 8005a34:	f108 33ff 	add.w	r3, r8, #4294967295
 8005a38:	2200      	movs	r2, #0
 8005a3a:	9900      	ldr	r1, [sp, #0]
 8005a3c:	428b      	cmp	r3, r1
 8005a3e:	da6e      	bge.n	8005b1e <__kernel_rem_pio2+0x36e>
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	f000 8089 	beq.w	8005b58 <__kernel_rem_pio2+0x3a8>
 8005a46:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a4c:	f1ab 0b18 	sub.w	fp, fp, #24
 8005a50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f6      	beq.n	8005a46 <__kernel_rem_pio2+0x296>
 8005a58:	4658      	mov	r0, fp
 8005a5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005ab8 <__kernel_rem_pio2+0x308>
 8005a5e:	f000 f9ff 	bl	8005e60 <scalbn>
 8005a62:	f108 0301 	add.w	r3, r8, #1
 8005a66:	00da      	lsls	r2, r3, #3
 8005a68:	9205      	str	r2, [sp, #20]
 8005a6a:	ec55 4b10 	vmov	r4, r5, d0
 8005a6e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005a70:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005acc <__kernel_rem_pio2+0x31c>
 8005a74:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005a78:	4646      	mov	r6, r8
 8005a7a:	f04f 0a00 	mov.w	sl, #0
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	f280 80cf 	bge.w	8005c22 <__kernel_rem_pio2+0x472>
 8005a84:	4644      	mov	r4, r8
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	f2c0 80fd 	blt.w	8005c86 <__kernel_rem_pio2+0x4d6>
 8005a8c:	4b12      	ldr	r3, [pc, #72]	@ (8005ad8 <__kernel_rem_pio2+0x328>)
 8005a8e:	461f      	mov	r7, r3
 8005a90:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005a92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a96:	9306      	str	r3, [sp, #24]
 8005a98:	f04f 0a00 	mov.w	sl, #0
 8005a9c:	f04f 0b00 	mov.w	fp, #0
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	eba8 0504 	sub.w	r5, r8, r4
 8005aa6:	e0e2      	b.n	8005c6e <__kernel_rem_pio2+0x4be>
 8005aa8:	f04f 0902 	mov.w	r9, #2
 8005aac:	e754      	b.n	8005958 <__kernel_rem_pio2+0x1a8>
 8005aae:	bf00      	nop
	...
 8005abc:	3ff00000 	.word	0x3ff00000
 8005ac0:	08006258 	.word	0x08006258
 8005ac4:	40200000 	.word	0x40200000
 8005ac8:	3ff00000 	.word	0x3ff00000
 8005acc:	3e700000 	.word	0x3e700000
 8005ad0:	41700000 	.word	0x41700000
 8005ad4:	3fe00000 	.word	0x3fe00000
 8005ad8:	08006218 	.word	0x08006218
 8005adc:	f854 3b04 	ldr.w	r3, [r4], #4
 8005ae0:	b945      	cbnz	r5, 8005af4 <__kernel_rem_pio2+0x344>
 8005ae2:	b123      	cbz	r3, 8005aee <__kernel_rem_pio2+0x33e>
 8005ae4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005ae8:	f844 3c04 	str.w	r3, [r4, #-4]
 8005aec:	2301      	movs	r3, #1
 8005aee:	3201      	adds	r2, #1
 8005af0:	461d      	mov	r5, r3
 8005af2:	e738      	b.n	8005966 <__kernel_rem_pio2+0x1b6>
 8005af4:	1acb      	subs	r3, r1, r3
 8005af6:	e7f7      	b.n	8005ae8 <__kernel_rem_pio2+0x338>
 8005af8:	f108 32ff 	add.w	r2, r8, #4294967295
 8005afc:	ab0c      	add	r3, sp, #48	@ 0x30
 8005afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005b06:	a90c      	add	r1, sp, #48	@ 0x30
 8005b08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005b0c:	e739      	b.n	8005982 <__kernel_rem_pio2+0x1d2>
 8005b0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8005b12:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b1c:	e7f3      	b.n	8005b06 <__kernel_rem_pio2+0x356>
 8005b1e:	a90c      	add	r1, sp, #48	@ 0x30
 8005b20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	430a      	orrs	r2, r1
 8005b28:	e787      	b.n	8005a3a <__kernel_rem_pio2+0x28a>
 8005b2a:	3401      	adds	r4, #1
 8005b2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	d0fa      	beq.n	8005b2a <__kernel_rem_pio2+0x37a>
 8005b34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005b3a:	eb0d 0503 	add.w	r5, sp, r3
 8005b3e:	9b06      	ldr	r3, [sp, #24]
 8005b40:	aa20      	add	r2, sp, #128	@ 0x80
 8005b42:	4443      	add	r3, r8
 8005b44:	f108 0701 	add.w	r7, r8, #1
 8005b48:	3d98      	subs	r5, #152	@ 0x98
 8005b4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005b4e:	4444      	add	r4, r8
 8005b50:	42bc      	cmp	r4, r7
 8005b52:	da04      	bge.n	8005b5e <__kernel_rem_pio2+0x3ae>
 8005b54:	46a0      	mov	r8, r4
 8005b56:	e6a2      	b.n	800589e <__kernel_rem_pio2+0xee>
 8005b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b5a:	2401      	movs	r4, #1
 8005b5c:	e7e6      	b.n	8005b2c <__kernel_rem_pio2+0x37c>
 8005b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005b64:	f7fa fc82 	bl	800046c <__aeabi_i2d>
 8005b68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005e30 <__kernel_rem_pio2+0x680>
 8005b6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005b70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b78:	46b2      	mov	sl, r6
 8005b7a:	f04f 0800 	mov.w	r8, #0
 8005b7e:	9b05      	ldr	r3, [sp, #20]
 8005b80:	4598      	cmp	r8, r3
 8005b82:	dd05      	ble.n	8005b90 <__kernel_rem_pio2+0x3e0>
 8005b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b88:	3701      	adds	r7, #1
 8005b8a:	eca5 7b02 	vstmia	r5!, {d7}
 8005b8e:	e7df      	b.n	8005b50 <__kernel_rem_pio2+0x3a0>
 8005b90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005b94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005b98:	f7fa fcd2 	bl	8000540 <__aeabi_dmul>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ba4:	f7fa fb16 	bl	80001d4 <__adddf3>
 8005ba8:	f108 0801 	add.w	r8, r8, #1
 8005bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bb0:	e7e5      	b.n	8005b7e <__kernel_rem_pio2+0x3ce>
 8005bb2:	f1cb 0000 	rsb	r0, fp, #0
 8005bb6:	ec47 6b10 	vmov	d0, r6, r7
 8005bba:	f000 f951 	bl	8005e60 <scalbn>
 8005bbe:	ec55 4b10 	vmov	r4, r5, d0
 8005bc2:	4b9d      	ldr	r3, [pc, #628]	@ (8005e38 <__kernel_rem_pio2+0x688>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa ff3f 	bl	8000a4c <__aeabi_dcmpge>
 8005bce:	b300      	cbz	r0, 8005c12 <__kernel_rem_pio2+0x462>
 8005bd0:	4b9a      	ldr	r3, [pc, #616]	@ (8005e3c <__kernel_rem_pio2+0x68c>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa fcb2 	bl	8000540 <__aeabi_dmul>
 8005bdc:	f7fa ff4a 	bl	8000a74 <__aeabi_d2iz>
 8005be0:	4606      	mov	r6, r0
 8005be2:	f7fa fc43 	bl	800046c <__aeabi_i2d>
 8005be6:	4b94      	ldr	r3, [pc, #592]	@ (8005e38 <__kernel_rem_pio2+0x688>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	f7fa fca9 	bl	8000540 <__aeabi_dmul>
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f7fa faeb 	bl	80001d0 <__aeabi_dsub>
 8005bfa:	f7fa ff3b 	bl	8000a74 <__aeabi_d2iz>
 8005bfe:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c00:	f10b 0b18 	add.w	fp, fp, #24
 8005c04:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005c08:	f108 0801 	add.w	r8, r8, #1
 8005c0c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005c10:	e722      	b.n	8005a58 <__kernel_rem_pio2+0x2a8>
 8005c12:	4620      	mov	r0, r4
 8005c14:	4629      	mov	r1, r5
 8005c16:	f7fa ff2d 	bl	8000a74 <__aeabi_d2iz>
 8005c1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005c20:	e71a      	b.n	8005a58 <__kernel_rem_pio2+0x2a8>
 8005c22:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c24:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005c28:	f7fa fc20 	bl	800046c <__aeabi_i2d>
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	462b      	mov	r3, r5
 8005c30:	f7fa fc86 	bl	8000540 <__aeabi_dmul>
 8005c34:	4652      	mov	r2, sl
 8005c36:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005c3a:	465b      	mov	r3, fp
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa fc7e 	bl	8000540 <__aeabi_dmul>
 8005c44:	3e01      	subs	r6, #1
 8005c46:	4604      	mov	r4, r0
 8005c48:	460d      	mov	r5, r1
 8005c4a:	e718      	b.n	8005a7e <__kernel_rem_pio2+0x2ce>
 8005c4c:	9906      	ldr	r1, [sp, #24]
 8005c4e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005c52:	9106      	str	r1, [sp, #24]
 8005c54:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005c58:	f7fa fc72 	bl	8000540 <__aeabi_dmul>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4650      	mov	r0, sl
 8005c62:	4659      	mov	r1, fp
 8005c64:	f7fa fab6 	bl	80001d4 <__adddf3>
 8005c68:	3601      	adds	r6, #1
 8005c6a:	4682      	mov	sl, r0
 8005c6c:	468b      	mov	fp, r1
 8005c6e:	9b00      	ldr	r3, [sp, #0]
 8005c70:	429e      	cmp	r6, r3
 8005c72:	dc01      	bgt.n	8005c78 <__kernel_rem_pio2+0x4c8>
 8005c74:	42b5      	cmp	r5, r6
 8005c76:	dae9      	bge.n	8005c4c <__kernel_rem_pio2+0x49c>
 8005c78:	ab48      	add	r3, sp, #288	@ 0x120
 8005c7a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005c7e:	e9c5 ab00 	strd	sl, fp, [r5]
 8005c82:	3c01      	subs	r4, #1
 8005c84:	e6ff      	b.n	8005a86 <__kernel_rem_pio2+0x2d6>
 8005c86:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	dc0b      	bgt.n	8005ca4 <__kernel_rem_pio2+0x4f4>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	dc39      	bgt.n	8005d04 <__kernel_rem_pio2+0x554>
 8005c90:	d05d      	beq.n	8005d4e <__kernel_rem_pio2+0x59e>
 8005c92:	9b02      	ldr	r3, [sp, #8]
 8005c94:	f003 0007 	and.w	r0, r3, #7
 8005c98:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005c9c:	ecbd 8b02 	vpop	{d8}
 8005ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005ca6:	2b03      	cmp	r3, #3
 8005ca8:	d1f3      	bne.n	8005c92 <__kernel_rem_pio2+0x4e2>
 8005caa:	9b05      	ldr	r3, [sp, #20]
 8005cac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005cb0:	eb0d 0403 	add.w	r4, sp, r3
 8005cb4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005cb8:	4625      	mov	r5, r4
 8005cba:	46c2      	mov	sl, r8
 8005cbc:	f1ba 0f00 	cmp.w	sl, #0
 8005cc0:	f1a5 0508 	sub.w	r5, r5, #8
 8005cc4:	dc6b      	bgt.n	8005d9e <__kernel_rem_pio2+0x5ee>
 8005cc6:	4645      	mov	r5, r8
 8005cc8:	2d01      	cmp	r5, #1
 8005cca:	f1a4 0408 	sub.w	r4, r4, #8
 8005cce:	f300 8087 	bgt.w	8005de0 <__kernel_rem_pio2+0x630>
 8005cd2:	9c05      	ldr	r4, [sp, #20]
 8005cd4:	ab48      	add	r3, sp, #288	@ 0x120
 8005cd6:	441c      	add	r4, r3
 8005cd8:	2000      	movs	r0, #0
 8005cda:	2100      	movs	r1, #0
 8005cdc:	f1b8 0f01 	cmp.w	r8, #1
 8005ce0:	f300 809c 	bgt.w	8005e1c <__kernel_rem_pio2+0x66c>
 8005ce4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005ce8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005cec:	f1b9 0f00 	cmp.w	r9, #0
 8005cf0:	f040 80a6 	bne.w	8005e40 <__kernel_rem_pio2+0x690>
 8005cf4:	9b04      	ldr	r3, [sp, #16]
 8005cf6:	e9c3 7800 	strd	r7, r8, [r3]
 8005cfa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005cfe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005d02:	e7c6      	b.n	8005c92 <__kernel_rem_pio2+0x4e2>
 8005d04:	9d05      	ldr	r5, [sp, #20]
 8005d06:	ab48      	add	r3, sp, #288	@ 0x120
 8005d08:	441d      	add	r5, r3
 8005d0a:	4644      	mov	r4, r8
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	2100      	movs	r1, #0
 8005d10:	2c00      	cmp	r4, #0
 8005d12:	da35      	bge.n	8005d80 <__kernel_rem_pio2+0x5d0>
 8005d14:	f1b9 0f00 	cmp.w	r9, #0
 8005d18:	d038      	beq.n	8005d8c <__kernel_rem_pio2+0x5dc>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d20:	9c04      	ldr	r4, [sp, #16]
 8005d22:	e9c4 2300 	strd	r2, r3, [r4]
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005d2e:	f7fa fa4f 	bl	80001d0 <__aeabi_dsub>
 8005d32:	ad4a      	add	r5, sp, #296	@ 0x128
 8005d34:	2401      	movs	r4, #1
 8005d36:	45a0      	cmp	r8, r4
 8005d38:	da2b      	bge.n	8005d92 <__kernel_rem_pio2+0x5e2>
 8005d3a:	f1b9 0f00 	cmp.w	r9, #0
 8005d3e:	d002      	beq.n	8005d46 <__kernel_rem_pio2+0x596>
 8005d40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d44:	4619      	mov	r1, r3
 8005d46:	9b04      	ldr	r3, [sp, #16]
 8005d48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005d4c:	e7a1      	b.n	8005c92 <__kernel_rem_pio2+0x4e2>
 8005d4e:	9c05      	ldr	r4, [sp, #20]
 8005d50:	ab48      	add	r3, sp, #288	@ 0x120
 8005d52:	441c      	add	r4, r3
 8005d54:	2000      	movs	r0, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	f1b8 0f00 	cmp.w	r8, #0
 8005d5c:	da09      	bge.n	8005d72 <__kernel_rem_pio2+0x5c2>
 8005d5e:	f1b9 0f00 	cmp.w	r9, #0
 8005d62:	d002      	beq.n	8005d6a <__kernel_rem_pio2+0x5ba>
 8005d64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d68:	4619      	mov	r1, r3
 8005d6a:	9b04      	ldr	r3, [sp, #16]
 8005d6c:	e9c3 0100 	strd	r0, r1, [r3]
 8005d70:	e78f      	b.n	8005c92 <__kernel_rem_pio2+0x4e2>
 8005d72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d76:	f7fa fa2d 	bl	80001d4 <__adddf3>
 8005d7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d7e:	e7eb      	b.n	8005d58 <__kernel_rem_pio2+0x5a8>
 8005d80:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005d84:	f7fa fa26 	bl	80001d4 <__adddf3>
 8005d88:	3c01      	subs	r4, #1
 8005d8a:	e7c1      	b.n	8005d10 <__kernel_rem_pio2+0x560>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	e7c6      	b.n	8005d20 <__kernel_rem_pio2+0x570>
 8005d92:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005d96:	f7fa fa1d 	bl	80001d4 <__adddf3>
 8005d9a:	3401      	adds	r4, #1
 8005d9c:	e7cb      	b.n	8005d36 <__kernel_rem_pio2+0x586>
 8005d9e:	ed95 7b00 	vldr	d7, [r5]
 8005da2:	ed8d 7b00 	vstr	d7, [sp]
 8005da6:	ed95 7b02 	vldr	d7, [r5, #8]
 8005daa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dae:	ec53 2b17 	vmov	r2, r3, d7
 8005db2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005db6:	f7fa fa0d 	bl	80001d4 <__adddf3>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	460f      	mov	r7, r1
 8005dc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dc6:	f7fa fa03 	bl	80001d0 <__aeabi_dsub>
 8005dca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dce:	f7fa fa01 	bl	80001d4 <__adddf3>
 8005dd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dd6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005dda:	e9c5 6700 	strd	r6, r7, [r5]
 8005dde:	e76d      	b.n	8005cbc <__kernel_rem_pio2+0x50c>
 8005de0:	ed94 7b00 	vldr	d7, [r4]
 8005de4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005de8:	ec51 0b17 	vmov	r0, r1, d7
 8005dec:	4652      	mov	r2, sl
 8005dee:	465b      	mov	r3, fp
 8005df0:	ed8d 7b00 	vstr	d7, [sp]
 8005df4:	f7fa f9ee 	bl	80001d4 <__adddf3>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460f      	mov	r7, r1
 8005e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e04:	f7fa f9e4 	bl	80001d0 <__aeabi_dsub>
 8005e08:	4652      	mov	r2, sl
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	f7fa f9e2 	bl	80001d4 <__adddf3>
 8005e10:	3d01      	subs	r5, #1
 8005e12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e16:	e9c4 6700 	strd	r6, r7, [r4]
 8005e1a:	e755      	b.n	8005cc8 <__kernel_rem_pio2+0x518>
 8005e1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e20:	f7fa f9d8 	bl	80001d4 <__adddf3>
 8005e24:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e28:	e758      	b.n	8005cdc <__kernel_rem_pio2+0x52c>
 8005e2a:	bf00      	nop
 8005e2c:	f3af 8000 	nop.w
	...
 8005e38:	41700000 	.word	0x41700000
 8005e3c:	3e700000 	.word	0x3e700000
 8005e40:	9b04      	ldr	r3, [sp, #16]
 8005e42:	9a04      	ldr	r2, [sp, #16]
 8005e44:	601f      	str	r7, [r3, #0]
 8005e46:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005e4a:	605c      	str	r4, [r3, #4]
 8005e4c:	609d      	str	r5, [r3, #8]
 8005e4e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005e52:	60d3      	str	r3, [r2, #12]
 8005e54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e58:	6110      	str	r0, [r2, #16]
 8005e5a:	6153      	str	r3, [r2, #20]
 8005e5c:	e719      	b.n	8005c92 <__kernel_rem_pio2+0x4e2>
 8005e5e:	bf00      	nop

08005e60 <scalbn>:
 8005e60:	b570      	push	{r4, r5, r6, lr}
 8005e62:	ec55 4b10 	vmov	r4, r5, d0
 8005e66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	462b      	mov	r3, r5
 8005e6e:	b991      	cbnz	r1, 8005e96 <scalbn+0x36>
 8005e70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005e74:	4323      	orrs	r3, r4
 8005e76:	d03d      	beq.n	8005ef4 <scalbn+0x94>
 8005e78:	4b35      	ldr	r3, [pc, #212]	@ (8005f50 <scalbn+0xf0>)
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f7fa fb5e 	bl	8000540 <__aeabi_dmul>
 8005e84:	4b33      	ldr	r3, [pc, #204]	@ (8005f54 <scalbn+0xf4>)
 8005e86:	429e      	cmp	r6, r3
 8005e88:	4604      	mov	r4, r0
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	da0f      	bge.n	8005eae <scalbn+0x4e>
 8005e8e:	a328      	add	r3, pc, #160	@ (adr r3, 8005f30 <scalbn+0xd0>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	e01e      	b.n	8005ed4 <scalbn+0x74>
 8005e96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005e9a:	4291      	cmp	r1, r2
 8005e9c:	d10b      	bne.n	8005eb6 <scalbn+0x56>
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa f996 	bl	80001d4 <__adddf3>
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	460d      	mov	r5, r1
 8005eac:	e022      	b.n	8005ef4 <scalbn+0x94>
 8005eae:	460b      	mov	r3, r1
 8005eb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005eb4:	3936      	subs	r1, #54	@ 0x36
 8005eb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005eba:	4296      	cmp	r6, r2
 8005ebc:	dd0d      	ble.n	8005eda <scalbn+0x7a>
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	a11d      	add	r1, pc, #116	@ (adr r1, 8005f38 <scalbn+0xd8>)
 8005ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ec6:	da02      	bge.n	8005ece <scalbn+0x6e>
 8005ec8:	a11d      	add	r1, pc, #116	@ (adr r1, 8005f40 <scalbn+0xe0>)
 8005eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ece:	a31a      	add	r3, pc, #104	@ (adr r3, 8005f38 <scalbn+0xd8>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f7fa fb34 	bl	8000540 <__aeabi_dmul>
 8005ed8:	e7e6      	b.n	8005ea8 <scalbn+0x48>
 8005eda:	1872      	adds	r2, r6, r1
 8005edc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005ee0:	428a      	cmp	r2, r1
 8005ee2:	dcec      	bgt.n	8005ebe <scalbn+0x5e>
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	dd08      	ble.n	8005efa <scalbn+0x9a>
 8005ee8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005eec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005ef0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ef4:	ec45 4b10 	vmov	d0, r4, r5
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
 8005efa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005efe:	da08      	bge.n	8005f12 <scalbn+0xb2>
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	a10b      	add	r1, pc, #44	@ (adr r1, 8005f30 <scalbn+0xd0>)
 8005f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f08:	dac1      	bge.n	8005e8e <scalbn+0x2e>
 8005f0a:	a10f      	add	r1, pc, #60	@ (adr r1, 8005f48 <scalbn+0xe8>)
 8005f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f10:	e7bd      	b.n	8005e8e <scalbn+0x2e>
 8005f12:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005f16:	3236      	adds	r2, #54	@ 0x36
 8005f18:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005f1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f20:	4620      	mov	r0, r4
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <scalbn+0xf8>)
 8005f24:	4629      	mov	r1, r5
 8005f26:	2200      	movs	r2, #0
 8005f28:	e7d4      	b.n	8005ed4 <scalbn+0x74>
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w
 8005f30:	c2f8f359 	.word	0xc2f8f359
 8005f34:	01a56e1f 	.word	0x01a56e1f
 8005f38:	8800759c 	.word	0x8800759c
 8005f3c:	7e37e43c 	.word	0x7e37e43c
 8005f40:	8800759c 	.word	0x8800759c
 8005f44:	fe37e43c 	.word	0xfe37e43c
 8005f48:	c2f8f359 	.word	0xc2f8f359
 8005f4c:	81a56e1f 	.word	0x81a56e1f
 8005f50:	43500000 	.word	0x43500000
 8005f54:	ffff3cb0 	.word	0xffff3cb0
 8005f58:	3c900000 	.word	0x3c900000
 8005f5c:	00000000 	.word	0x00000000

08005f60 <floor>:
 8005f60:	ec51 0b10 	vmov	r0, r1, d0
 8005f64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005f70:	2e13      	cmp	r6, #19
 8005f72:	460c      	mov	r4, r1
 8005f74:	4605      	mov	r5, r0
 8005f76:	4680      	mov	r8, r0
 8005f78:	dc34      	bgt.n	8005fe4 <floor+0x84>
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	da17      	bge.n	8005fae <floor+0x4e>
 8005f7e:	a332      	add	r3, pc, #200	@ (adr r3, 8006048 <floor+0xe8>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	f7fa f926 	bl	80001d4 <__adddf3>
 8005f88:	2200      	movs	r2, #0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f7fa fd68 	bl	8000a60 <__aeabi_dcmpgt>
 8005f90:	b150      	cbz	r0, 8005fa8 <floor+0x48>
 8005f92:	2c00      	cmp	r4, #0
 8005f94:	da55      	bge.n	8006042 <floor+0xe2>
 8005f96:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005f9a:	432c      	orrs	r4, r5
 8005f9c:	2500      	movs	r5, #0
 8005f9e:	42ac      	cmp	r4, r5
 8005fa0:	4c2b      	ldr	r4, [pc, #172]	@ (8006050 <floor+0xf0>)
 8005fa2:	bf08      	it	eq
 8005fa4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005fa8:	4621      	mov	r1, r4
 8005faa:	4628      	mov	r0, r5
 8005fac:	e023      	b.n	8005ff6 <floor+0x96>
 8005fae:	4f29      	ldr	r7, [pc, #164]	@ (8006054 <floor+0xf4>)
 8005fb0:	4137      	asrs	r7, r6
 8005fb2:	ea01 0307 	and.w	r3, r1, r7
 8005fb6:	4303      	orrs	r3, r0
 8005fb8:	d01d      	beq.n	8005ff6 <floor+0x96>
 8005fba:	a323      	add	r3, pc, #140	@ (adr r3, 8006048 <floor+0xe8>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa f908 	bl	80001d4 <__adddf3>
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f7fa fd4a 	bl	8000a60 <__aeabi_dcmpgt>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	d0eb      	beq.n	8005fa8 <floor+0x48>
 8005fd0:	2c00      	cmp	r4, #0
 8005fd2:	bfbe      	ittt	lt
 8005fd4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005fd8:	4133      	asrlt	r3, r6
 8005fda:	18e4      	addlt	r4, r4, r3
 8005fdc:	ea24 0407 	bic.w	r4, r4, r7
 8005fe0:	2500      	movs	r5, #0
 8005fe2:	e7e1      	b.n	8005fa8 <floor+0x48>
 8005fe4:	2e33      	cmp	r6, #51	@ 0x33
 8005fe6:	dd0a      	ble.n	8005ffe <floor+0x9e>
 8005fe8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005fec:	d103      	bne.n	8005ff6 <floor+0x96>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	f7fa f8ef 	bl	80001d4 <__adddf3>
 8005ff6:	ec41 0b10 	vmov	d0, r0, r1
 8005ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ffe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006002:	f04f 37ff 	mov.w	r7, #4294967295
 8006006:	40df      	lsrs	r7, r3
 8006008:	4207      	tst	r7, r0
 800600a:	d0f4      	beq.n	8005ff6 <floor+0x96>
 800600c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006048 <floor+0xe8>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f7fa f8df 	bl	80001d4 <__adddf3>
 8006016:	2200      	movs	r2, #0
 8006018:	2300      	movs	r3, #0
 800601a:	f7fa fd21 	bl	8000a60 <__aeabi_dcmpgt>
 800601e:	2800      	cmp	r0, #0
 8006020:	d0c2      	beq.n	8005fa8 <floor+0x48>
 8006022:	2c00      	cmp	r4, #0
 8006024:	da0a      	bge.n	800603c <floor+0xdc>
 8006026:	2e14      	cmp	r6, #20
 8006028:	d101      	bne.n	800602e <floor+0xce>
 800602a:	3401      	adds	r4, #1
 800602c:	e006      	b.n	800603c <floor+0xdc>
 800602e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006032:	2301      	movs	r3, #1
 8006034:	40b3      	lsls	r3, r6
 8006036:	441d      	add	r5, r3
 8006038:	4545      	cmp	r5, r8
 800603a:	d3f6      	bcc.n	800602a <floor+0xca>
 800603c:	ea25 0507 	bic.w	r5, r5, r7
 8006040:	e7b2      	b.n	8005fa8 <floor+0x48>
 8006042:	2500      	movs	r5, #0
 8006044:	462c      	mov	r4, r5
 8006046:	e7af      	b.n	8005fa8 <floor+0x48>
 8006048:	8800759c 	.word	0x8800759c
 800604c:	7e37e43c 	.word	0x7e37e43c
 8006050:	bff00000 	.word	0xbff00000
 8006054:	000fffff 	.word	0x000fffff

08006058 <_init>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	bf00      	nop
 800605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605e:	bc08      	pop	{r3}
 8006060:	469e      	mov	lr, r3
 8006062:	4770      	bx	lr

08006064 <_fini>:
 8006064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006066:	bf00      	nop
 8006068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800606a:	bc08      	pop	{r3}
 800606c:	469e      	mov	lr, r3
 800606e:	4770      	bx	lr
